{"version":3,"sources":["components/GameMenu/style.ts","types/GamePhase.ts","types/PlayerStatus.ts","game/Card/index.ts","constants/index.ts","game/Deck/index.ts","game/Stack/index.ts","game/Hand/index.ts","types/HandOutcome.ts","game/Dealer/index.ts","actions/index.ts","game/Player/index.ts","game/index.ts","actions/types.ts","components/GameMenu/index.tsx","components/ChipTray/style.ts","components/ChipTray/index.tsx","components/Header/style.ts","components/Header/index.tsx","components/Card/style.ts","components/Card/index.tsx","components/PlayerHand/style.ts","components/common/HandContainer.ts","components/common/HandScore.ts","components/PlayerHand/index.tsx","components/PlayerHandControls/style.ts","components/PlayerHandControls/index.tsx","components/Table/style.ts","components/DealerHand/style.ts","components/DealerHand/index.tsx","components/Pot/style.ts","components/Pot/index.tsx","components/Table/index.tsx","App.tsx","reducers/gameReducer.ts","reducers/playerReducer.ts","reducers/index.ts","store/index.ts","index.tsx"],"names":["GamePhase","MenuWrapper","styled","div","MenuButton","button","props","disabled","PlayerStatus","Card","rank","suit","this","SUITS","RANKS","Deck","cards","generateCards","shuffle","singleDeck","push","i","length","randomIndex","Math","floor","random","temp","pop","Stack","startingChips","chips","amount","Hand","value","isBlackJack","isBust","card","calculateHandValue","sortedHand","sort","a","getRank","total","reduce","acc","includes","Number","formattedCards","map","hand","HandOutcome","Dealer","status","Active","addCard","getIsBust","Bust","Stand","getValue","getIsBlackJack","getCards","getSuit","game","Player","name","betSize","handOutcome","stack","Undetermined","chipStackAmount","getChips","Error","removeChips","winAmount","addChips","bet","resetBetSize","outcome","getChipValue","handValue","getHandValue","getHandOutcome","Game","players","deck","dealer","activePlayer","gamePhase","firstPlayer","Betting","playerName","player","find","getName","drawNewHand","forEach","drawCard","PlayerHand","getStatus","isHoldingBlackjack","nextActivePlayer","serialize","stand","getHand","doubleDown","activePlayerIndex","findIndex","isInteger","dealStartingHands","playDealerHand","DealerHand","Results","endRound","dealerHandValue","dealerHasBlackjack","playerHasBlackjack","playerHandValue","setHandOutcome","Loser","Push","handlePush","Winner","applyWinMultiplier","resetPlayer","localStorage","setItem","JSON","stringify","storedGame","getItem","parsedGame","parse","playerHand","createHandFromStorageData","setGameMenuVisibility","isGameMenuVisible","type","setActivePlayer","getSerializedActivePlayer","setGamePhase","phase","update","dispatch","updateDealer","getGamePhase","setTimeout","startNewRound","getDealer","serializeHand","setTrayAmount","trayAmount","connect","state","isMenuVisible","startGame","saveGame","loadGame","onClick","Wrapper","Tray","Chip","StackImage","StackContainer","StackDisplay","h3","ControlButton","ControlPanel","bettingPlayer","useState","betAmount","setBetAmount","handleClick","previousAmount","isBettingPhase","className","StyledHeader","header","Title","h1","hide","role","aria-label","CardContainer","flipAnimation","keyframes","CardBase","img","rankCharacter","charAt","suitCharacter","specialChar","src","HandContainer","key","HandScore","HandControlWrapper","HandControlButton","hit","hittingPlayer","standingPlayer","double","doublingPlayer","isPlayerActive","isPlayerHoldingCards","PlayerArea","PotContainer","isActivePlayer","some","ChipWrapper","scaleAnimation","BetLabel","p","WinLabel","LoseLabel","PushLabel","Pot","animation","alt","GlobalStyle","createGlobalStyle","AppWrapper","initialState","Menu","combineReducers","action","filter","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"soCAEO,ICFFA,EDEQC,EAAcC,IAAOC,IAAV,KAkBXC,EAAaF,IAAOG,OAAV,KAYV,SAACC,GAAD,OAAYA,EAAMC,SAAW,GAAM,KAGlC,SAACD,GAAD,OACRA,EAAMC,SAAW,wBAA0B,oBAIpBL,YAAOE,EAAPF,CAAH,M,SCxCrBF,K,YAAAA,E,kBAAAA,E,wBAAAA,E,wBAAAA,E,mBAAAA,M,KAQUA,ICPHQ,EDOGR,I,qCELMS,E,WAKnB,WAAYC,EAAYC,GAAa,yBAJ7BA,UAI4B,OAF5BD,UAE4B,EAClCE,KAAKD,KAAOA,EACZC,KAAKF,KAAOA,E,sDAQZ,OAAOE,KAAKD,O,gCAQZ,OAAOC,KAAKF,O,gCAQZ,MAAM,GAAN,OAAUE,KAAKF,KAAf,eAA0BE,KAAKD,U,KC/BtBE,EAAgB,CAAC,SAAU,SAAU,WAAY,SAEjDC,EAAgB,CAC3B,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,OACA,QACA,OACA,OCfmBC,E,WAGnB,aAAe,yBAFPC,MAAgB,GAGtBJ,KAAKK,gBACLL,KAAKM,U,4DAOL,IAD4B,EACtBC,EAAqB,GADC,cAGTN,GAHS,IAG5B,2BAA0B,CAAC,IAAD,EAAfF,EAAe,sBACLG,GADK,IACxB,2BAA0B,CAAC,IAAhBJ,EAAe,QACxBS,EAAWC,KAAK,IAAIX,EAAKC,EAAMC,KAFT,gCAHE,8BAS5B,IAAK,IAAIU,EAAI,EAAGA,EDFW,ECEUA,GAAK,EACxCT,KAAKI,MAAL,sBAAiBJ,KAAKI,OAAUG,K,gCAclC,IANsB,IAEpBH,EAEEJ,KAFFI,MACSM,EACPV,KADFI,MAASM,OAGFD,EAAI,EAAGA,EAAIC,EAAQD,GAAK,EAAG,CAClC,IAAME,EAAcC,KAAKC,MAAMD,KAAKE,SAAWJ,GACzCK,EAAOX,EAAMO,GACnBP,EAAMO,GAAeP,EAAMK,GAC3BL,EAAMK,GAAKM,K,iCASb,OAAOf,KAAKI,Q,iCAWZ,OAJ0B,IAAtBJ,KAAKI,MAAMM,QACbV,KAAKK,gBAGAL,KAAKI,MAAMY,U,oCC9DDC,E,WAGnB,WAAYC,GAAwB,yBAF5BC,MAAQ,EAGdnB,KAAKmB,MAAQD,E,qDAOCE,GACdpB,KAAKmB,OAASC,I,kCAOGA,GACbA,GAAUpB,KAAKmB,MACjBnB,KAAKmB,MAAQ,EAEbnB,KAAKmB,OAASC,I,iCAQhB,OAAOpB,KAAKmB,U,KCrBKE,E,iDACXjB,MAAgB,G,KAEhBkB,MAAQ,E,KAERC,aAAc,E,KAEdC,QAAS,E,uDAOf,OAAOxB,KAAKI,Q,iCA4BZ,OAAOJ,KAAKsB,Q,uCAQZ,OAAOtB,KAAKuB,c,kCAQZ,OAAOvB,KAAKwB,S,8BAOCC,GACbzB,KAAKI,MAAMI,KAAKiB,GAChBzB,KAAK0B,uB,2CAQL,IAAMC,EAAqB,YAAI3B,KAAKI,OAAOwB,MAAK,SAACC,GAAD,MAC9B,QAAhBA,EAAEC,UAAsB,GAAK,KAGzBC,EAAgBJ,EAAWK,QAAO,SAACC,EAAKR,GAC5C,IAAM3B,EAAO2B,EAAKK,UAElB,MAAa,QAAThC,EACKmC,GAAO,GAAKA,EAAM,EAAIA,EAAM,GAEjC,CAAC,OAAQ,QAAS,QAAQC,SAASpC,GAC9BmC,EAAM,GAERA,EAAME,OAAOrC,KACnB,GAECiC,GAAS,KACX/B,KAAKwB,QAAS,GAGF,KAAVO,GAAsC,IAAtBJ,EAAWjB,SAC7BV,KAAKuB,aAAc,GAGrBvB,KAAKsB,MAAQS,K,oDA7EO,IAJpB3B,EAImB,EAJnBA,MACAmB,EAGmB,EAHnBA,YACAC,EAEmB,EAFnBA,OACAF,EACmB,EADnBA,MAEMc,EAAiBhC,EAAMiC,KAC3B,SAACZ,GAAD,OACE,IAAI5B,EAAK4B,EAAK3B,KAAc2B,EAAK1B,SAG/BuC,EAAO,IAAIjB,EAMjB,OALAiB,EAAKlC,MAAQgC,EACbE,EAAKf,YAAcA,EACnBe,EAAKd,OAASA,EACdc,EAAKhB,MAAQA,EAENgB,M,eL3CC1C,K,gBAAAA,E,cAAAA,E,aAAAA,M,SMDP2C,ECKgBC,E,WAKnB,WAAYF,EAAaG,GAAwB,yBAJvCH,UAIsC,OAFtCG,YAEsC,EAC9CzC,KAAKsC,KAAL,OAAYA,QAAZ,IAAYA,IAAQ,IAAIjB,EACxBrB,KAAKyC,OAAL,OAAcA,QAAd,IAAcA,IAAU7C,EAAa8C,O,oDAOxBjB,GACbzB,KAAKsC,KAAKK,QAAQlB,GACdzB,KAAKsC,KAAKM,cACZ5C,KAAKyC,OAAS7C,EAAaiD,Q,8BAQ7B7C,KAAKyC,OAAS7C,EAAakD,Q,gCAO3B,OAAO9C,KAAKsC,O,qCAOZ,OAAOtC,KAAKsC,KAAKS,a,+BAOjB,OAAO/C,KAAKsC,KAAKM,c,2CAOjB,OAAO5C,KAAKsC,KAAKU,mB,kCAOjB,OAAOhD,KAAKyC,S,oCAOZzC,KAAKsC,KAAO,IAAIjB,I,sCAOhB,OAAOrB,KAAKsC,KACTW,WACAZ,KAAI,SAACZ,GAAD,MAAW,CAAE1B,KAAM0B,EAAKyB,UAAWpD,KAAM2B,EAAKK,kB,eDjFpDS,K,4BAAAA,E,cAAAA,E,gBAAAA,E,aAAAA,M,KAOUA,IEQXY,EFRWZ,IGKMa,E,kDASnB,WACEC,EACAnC,EACAoC,EACAC,EACAjB,EACAG,GACC,IAAD,8BACA,cAAMH,EAAMG,IAhBNY,UAeN,IAbMG,WAaN,IAXMF,aAWN,IATMC,iBASN,EAEA,EAAKF,KAAOA,EACZ,EAAKG,MAAQ,IAAIvC,EAAMC,GACvB,EAAKoC,QAAL,OAAeA,QAAf,IAAeA,IAAW,EAC1B,EAAKC,YAAL,OAAmBA,QAAnB,IAAmBA,IAAehB,EAAYkB,aAL9C,E,sDAYA,OAAOzD,KAAKqD,O,iCAOZ,OAAOrD,KAAKwD,Q,0BAOHpC,GACT,IAAMsC,EAAkB1D,KAAKwD,MAAMG,WACnC,GAAIvC,EAASsC,EACX,MAAM,IAAIE,MAAJ,mBACQxC,EADR,yBAC+BsC,EAD/B,iBAKR1D,KAAKwD,MAAMK,YAAYzC,GACvBpB,KAAKsD,SAAWlC,I,2CAOhB,GAAIpB,KAAKyC,SAAW7C,EAAaiD,KAC/B,MAAM,IAAIe,MAAM,2CAGlB,IAAME,EAAY9D,KAAKsC,KAAKU,iBP/CQ,IOgDhChD,KAAKsD,QPlD0B,EOmD/BtD,KAAKsD,QAETtD,KAAKwD,MAAMO,SAASD,K,mCAOpB9D,KAAKwD,MAAMO,SAAS/D,KAAKsD,W,qCAOzB,OAAOtD,KAAKwD,MAAMG,a,mCAOlB,OAAO3D,KAAKsD,U,iCAOI7B,GAChBzB,KAAK2C,QAAQlB,GACbzB,KAAKgE,IAAIhE,KAAKsD,SAETtD,KAAKwB,WACRxB,KAAKyC,OAAS7C,EAAakD,S,qCAQ7B9C,KAAKsD,QAAU,I,oCAOf,oEACAtD,KAAKiE,eACLjE,KAAKuD,YAAchB,EAAYkB,aAC/BzD,KAAKyC,OAAS7C,EAAa8C,S,qCAOPwB,GACpBlE,KAAKuD,YAAcW,I,uCAQnB,OAAOlE,KAAKuD,c,kCAOZ,MAAO,CACLF,KAAMrD,KAAKqD,KACXf,KAAMtC,KAAKsC,KACRW,WACAZ,KAAI,SAACZ,GAAD,MAAW,CAAE1B,KAAM0B,EAAKyB,UAAWpD,KAAM2B,EAAKK,cACrDW,OAAQzC,KAAKyC,OACbe,MAAOxD,KAAKmE,eACZb,QAAStD,KAAKsD,QACdc,UAAWpE,KAAKqE,eAChBd,YAAavD,KAAKsE,sB,GArJY9B,GCIf+B,E,WAWnB,WAAYC,GAA2B,yBAV/BC,UAU8B,OAR9BD,aAQ8B,OAN9BE,YAM8B,OAJ9BC,kBAI8B,OAF9BC,eAE8B,EACpC5E,KAAKyE,KAAO,IAAItE,EAChBH,KAAK0E,OAAS,IAAIlC,EAClBxC,KAAKwE,QAAUA,EAAQnC,KACrB,gBAAGgB,EAAH,EAAGA,KAAMnC,EAAT,EAASA,cAAT,OAA6B,IAAIkC,EAAOC,EAAMnC,MAJZ,IAM7B2D,EAN6B,YAMd7E,KAAKwE,QANS,MAOpCxE,KAAK2E,aAAeE,EACpB7E,KAAK4E,UAAYxF,EAAU0F,Q,6DAQLC,GACtB,IAAMC,EAAShF,KAAKwE,QAAQS,MAC1B,SAACD,GAAD,OAAYA,EAAOE,YAAcH,KAGnC,IAAKC,EACH,MAAM,IAAIpB,MAAJ,gCAAmCmB,IAG3C,OAAOC,I,kCAOP,OAAOhF,KAAK0E,S,mCAOZ,OAAO1E,KAAKwE,U,4CAOZ,OAAOxE,KAAK2E,aAAaO,Y,0CAMO,IAAD,OAC/BlF,KAAK0E,OAAOS,cACZnF,KAAKwE,QAAQY,SAAQ,SAACJ,GAAD,OAAYA,EAAOG,iBAExC,IAAK,IAAI1E,EAAI,EAAGA,EArEO,EAqEiBA,GAAK,EAC3CT,KAAKwE,QAAQY,SAAQ,SAACJ,GAAD,OAAYA,EAAOrC,QAAQ,EAAK8B,KAAKY,eAC1DrF,KAAK0E,OAAO/B,QAAQ3C,KAAKyE,KAAKY,YAEhCrF,KAAK4E,UAAYxF,EAAUkG,a,4BAQ3B,IAAMN,EAAShF,KAAK2E,aAEpB,GAAIK,EAAOO,cAAgB3F,EAAa8C,OACtC,MAAM,IAAIkB,MAAM,2CAGlB,IAAMnC,EAAOzB,KAAKyE,KAAKY,WAMvB,OALAL,EAAOrC,QAAQlB,IAEXuD,EAAOxD,UAAYwD,EAAOQ,uBAC5BxF,KAAKyF,mBAEAT,EAAOU,c,8BAQd,IAAMV,EAAShF,KAAK2E,aAEpB,GAAIK,EAAOO,cAAgB3F,EAAa8C,OACtC,MAAM,IAAIkB,MAAM,mDAKlB,OAFAoB,EAAOW,QACP3F,KAAKyF,mBACET,EAAOU,c,+BAQd,IAAMV,EAAShF,KAAK2E,aAEpB,GAAIK,EAAOO,cAAgB3F,EAAa8C,OACtC,MAAM,IAAIkB,MAAM,oDAGlB,GAA2C,IAAvCoB,EAAOY,UAAU3C,WAAWvC,OAC9B,MAAM,IAAIkD,MAAM,kDAGlB,IAAMnC,EAAOzB,KAAKyE,KAAKY,WAGvB,OAFAL,EAAOa,WAAWpE,GAClBzB,KAAKyF,mBACET,EAAOU,c,yCAMiB,IAAD,OACxBI,EAAoB9F,KAAKwE,QAAQuB,WACrC,SAACf,GAAD,OAAYA,EAAOE,YAAc,EAAKP,aAAaO,aAGrD,IAAK/C,OAAO6D,UAAUF,GACpB,MAAM,IAAIlC,MAAM,iDAGlB5D,KAAK2E,aAAe3E,KAAKwE,SACtBsB,EAAoB,GAAK9F,KAAKwE,QAAQ9D,QAGrCoF,IAAsB9F,KAAKwE,QAAQ9D,OAAS,IAC1CV,KAAK4E,YAAcxF,EAAU0F,QAC/B9E,KAAKiG,oBAELjG,KAAKkG,oB,0BAWA9E,GACT,IAAM4D,EAAShF,KAAK2E,aAGpB,OAFAK,EAAOhB,IAAI5C,GACXpB,KAAKyF,mBACET,EAAOU,c,uCASd,IAFA1F,KAAK4E,UAAYxF,EAAU+G,WAEpBnG,KAAK0E,OAAOL,eAAiB,IAClCrE,KAAK0E,OAAO/B,QAAQ3C,KAAKyE,KAAKY,YAG3BrF,KAAK0E,OAAOlD,UACfxB,KAAK0E,OAAOiB,QAGd3F,KAAK4E,UAAYxF,EAAUgH,QAC3BpG,KAAKqG,a,iCAMkB,IAAD,OAChBC,EAAkBtG,KAAK0E,OAAOL,eAC9BkC,EAAqBvG,KAAK0E,OAAOc,qBAEvCxF,KAAKwE,QAAQY,SAAQ,SAACJ,GACpB,IAAMwB,EAAqBxB,EAAOQ,qBAC5BiB,EAAkBzB,EAAOX,eAG7BW,EAAOxD,WACL,EAAKkD,OAAOlD,UAAY8E,EAAkBG,GAC3CF,IAAuBC,EAExBxB,EAAO0B,eAAenE,EAAYoE,QAIhCF,IAAoBH,IACtBtB,EAAO0B,eAAenE,EAAYqE,MAClC5B,EAAO6B,eAGL,EAAKnC,OAAOlD,UAAYiF,EAAkBH,KAC5CtB,EAAO0B,eAAenE,EAAYuE,QAClC9B,EAAO+B,4B,kDAQyC,IAAD,OAC7CpC,EAAe3E,KAAKwE,QAAQS,MAChC,SAACD,GAAD,OAAYA,EAAOE,YAAc,EAAKP,aAAaO,aAGrD,IAAKP,EACH,MAAM,IAAIf,MAAM,oCAGlB,OAAOe,EAAae,c,qCAOpB,OAAO1F,KAAK4E,Y,sCAOZ5E,KAAK0E,OAAOS,cACZnF,KAAKwE,QAAQY,SAAQ,SAACJ,GACpBA,EAAOgC,iBAGThH,KAAK4E,UAAYxF,EAAU0F,U,iCAI3BmC,aAAaC,QAAQ,OAAQC,KAAKC,UAAUpH,S,iCAGrB,IAAD,OAChBqH,EAAaJ,aAAaK,QAAQ,QAExC,IAAKD,EACH,MAAM,IAAIzD,MAAM,oCAGlB,IAAM2D,EAAaJ,KAAKK,MAAMH,GAE9BrH,KAAKwE,QAAU,GACfxE,KAAKyE,KAAO,IAAItE,EAChBoH,EAAW/C,QAAQY,SAAQ,SAACJ,GAC1B,IAAMyC,EAAmBpG,EAAKqG,0BAA0B1C,EAAO1C,MAC/D,EAAKkC,QAAL,sBACK,EAAKA,SADV,CAEE,IAAIpB,EACF4B,EAAO3B,KACP2B,EAAOxB,MAAMrC,MACb6D,EAAO1B,QACP0B,EAAOzB,YACPkE,EACAzC,EAAOvC,aAIbzC,KAAK0E,OAAS,IAAIlC,EAChBnB,EAAKqG,0BAA0BH,EAAW7C,OAAOpC,MACjDiF,EAAW7C,OAAOjC,QAGpB,IAAMkC,EAAe3E,KAAKwE,QAAQS,MAChC,SAACD,GAAD,OAAYA,EAAOE,YAAcqC,EAAW5C,aAAatB,QAG3D,IAAKsB,EACH,MAAM,IAAIf,MAAM,+CAElB5D,KAAK2E,aAAeA,EACpB3E,KAAK4E,UAAY2C,EAAW3C,c,KF9RnB+C,EAAwB,SACnCC,GADmC,MAEnB,CAChBC,KGxBsC,2BHyBtCD,sBAGWE,EAAkB,iBAAqB,CAClDD,KG5B+B,oBH6B/BlD,aAAcxB,EAAK4E,8BAGRC,EAAe,SAACC,GAAD,MAAmC,CAC7DJ,KGnC4B,iBHoC5BI,UAGWC,EAAS,SAAClD,GAAD,OAAwC,SAACmD,GAC7DA,EAAS,CACPN,KG3CyB,gBH4CzB7C,WAEFmD,EAASL,KACTK,EAASC,KACTD,EAASH,EAAa7E,EAAKkF,iBAEvBlF,EAAKkF,iBAAmBjJ,EAAUgH,SACpCkC,YAAW,kBAAMH,EAASI,OAAkB,OAwBnCH,EAAe,kBAAgB,SAACD,GAI3CA,EAAS,CACPN,KG3E8B,qBH4E9BnD,OAAQ,CAAEpC,KALCa,EAAKqF,YAAYC,gBAKZrE,UAJAjB,EAAKqF,YAAYnE,oBAiBxBqE,EAAgB,SAACC,GAAD,MAAqC,CAChEd,KGzF6B,kBH0F7Bc,eAGWJ,EAAgB,kBAAgB,SAACJ,GAC5ChF,EAAKoF,gBACLJ,EAASO,EAAc,IACvBP,EAASD,EAAO/E,EAAK4E,gCItCRa,eALS,SAACC,GAAD,MAA+B,CACrDC,cAAeD,EAAM1F,KAAKyE,kBAC1BjD,aAAckE,EAAM7D,OAAOL,gBAGW,CACtCoE,UJjDuB,SAACvE,GAAD,OAAwC,SAAC2D,GAChEhF,EAAO,IAAIoB,EAAKC,GAChB2D,EAASH,EAAa5I,EAAU0F,UAChCqD,EAASR,GAAsB,IAC/BQ,EAASL,KACTK,EAASC,OI6CTY,SJuCsB,kBAAgB,SAACb,GACvC,IAAKhF,EACH,MAAM,IAAIS,MAAM,qDAGlBT,EAAK6F,aI3CLC,SJ8CsB,kBAAgB,SAACd,GAClChF,IACHA,EAAO,IAAIoB,EAAK,CAAC,CAAElB,KAAM,MAAOnC,cAAe,QAGjDiC,EAAK8F,WACLd,EAASD,EAAO/E,EAAK4E,gCInDrBJ,yBAJaiB,EA1CmB,SAAC,GAO5B,IANLG,EAMI,EANJA,UACAC,EAKI,EALJA,SACAC,EAII,EAJJA,SACAtB,EAGI,EAHJA,sBACAmB,EAEI,EAFJA,cACAnE,EACI,EADJA,aAEA,OACE,kBAACtF,EAAD,KACE,kBAACG,EAAD,CACE0J,QAAS,kBAAMH,EAAU,CAAC,CAAE1F,KAAM,MAAOnC,cAAe,SAD1D,YAKA,kBAAC1B,EAAD,CACEG,UAAWgF,EACXuE,QAAS,WACPF,IACArB,GAAuBmB,KAJ3B,aASA,kBAACtJ,EAAD,CACEG,UAAWsH,aAAaK,QAAQ,QAChC4B,QAAS,WACPD,IACAtB,GAAuBmB,KAJ3B,iB,4iEC7CC,IAAMK,GAAU7J,IAAOC,IAAV,MAIP6J,GAAO9J,IAAOC,IAAV,KA8BJ8J,GAAO/J,IAAOG,OAAV,KAaJ6J,GAAahK,IAAOC,IAAV,KAQVgK,GAAiBjK,IAAOC,IAAV,KAOdiK,GAAelK,IAAOmK,GAAV,KAOZC,GAAgBpK,IAAOG,OAAV,KAKb,SAACC,GAAD,OAAYA,EAAMC,SAAW,GAAM,KAGpC,SAACD,GAAD,OAAYA,EAAMC,SAAW,cAAgB,aAK5CgK,GAAerK,IAAOC,IAAV,KCiCVqJ,gBALS,SAACC,GAAD,MAA+B,CACrDlE,aAAckE,EAAM7D,OAAOL,aAC3BC,UAAWiE,EAAM1F,KAAK8E,SAGgB,CACtCjE,IN9DiB,SAAC5C,GAAD,OAA8B,SAAC+G,GAChD,IAAMyB,EAAgBzG,EAAKa,IAAI5C,GAC/B+G,EAASD,EAAO0B,MM6DhBlB,iBAFaE,EA5FmB,SAAC,GAK5B,IAJL5E,EAII,EAJJA,IACAW,EAGI,EAHJA,aACA+D,EAEI,EAFJA,cACA9D,EACI,EADJA,UACI,EAC8BiF,mBAAiB,GAD/C,mBACGC,EADH,KACcC,EADd,KAGEC,EAAc,SAAC5I,IACH,OAAZuD,QAAY,IAAZA,OAAA,EAAAA,EAAcnB,OAAQsG,EAAY1I,EAAS,IAC/C2I,GAAa,SAACE,GAAD,OAAoBA,EAAiB7I,KAClDsH,EAAcoB,EAAY1I,KAQtB8I,EAAiBtF,IAAcxF,EAAU0F,QAE/C,OACE,kBAACqE,GAAD,KACE,kBAACC,GAAD,KACE,kBAACO,GAAD,KACE,kBAACD,GAAD,CACER,QAZO,WACfa,EAAa,GACbrB,EAAc,IAWN/I,UAAWmK,IAAcI,GAF3B,SAMA,kBAACX,GAAD,KACE,kBAACD,GAAD,MACA,kBAACE,GAAD,UAA4B,OAAZ7E,QAAY,IAAZA,OAAA,EAAAA,EAAcnB,OAAQsG,IAExC,kBAACJ,GAAD,CACE/J,UAAWmK,IAAcI,EACzBhB,QAAS,WACPlF,EAAI8F,GACJC,EAAa,KAJjB,SAUF,yBAAKI,UAAU,SACb,kBAACd,GAAD,CACEc,UAAU,WACVjB,QAAS,kBAAMc,EAAY,IAC3BrK,UAAWuK,GAHb,KAOA,kBAACb,GAAD,CACEc,UAAU,aACVjB,QAAS,kBAAMc,EAAY,IAC3BrK,UAAWuK,GAHb,KAOA,kBAACb,GAAD,CACEc,UAAU,cACVjB,QAAS,kBAAMc,EAAY,KAC3BrK,UAAWuK,GAHb,MAOA,kBAACb,GAAD,CACEc,UAAU,YACVjB,QAAS,kBAAMc,EAAY,KAC3BrK,UAAWuK,GAHb,MAOA,kBAACb,GAAD,CACEc,UAAU,aACVjB,QAAS,kBAAMc,EAAY,MAC3BrK,UAAWuK,GAHb,a,0sBCjGH,IAAME,GAAe9K,IAAO+K,OAAV,MAWZC,GAAQhL,IAAOiL,GAAV,MAWL/K,GAAaF,IAAOG,OAAV,MACP,SAACC,GAAD,OACZA,EAAM8K,KAAO,SAAW,aCcb5B,gBALS,SAACC,GAAD,MAA+B,CACrDC,cAAeD,EAAM1F,KAAKyE,kBAC1BjD,aAAckE,EAAM7D,OAAOL,gBAGW,CAAEgD,yBAA3BiB,EA1BiB,SAAC,GAI1B,IAHLjB,EAGI,EAHJA,sBACAmB,EAEI,EAFJA,cACAnE,EACI,EADJA,aAEA,OACE,kBAACyF,GAAD,KACE,kBAACE,GAAD,uBACkB,IAChB,0BAAMG,KAAK,MAAMC,aAAW,cAAcP,UAAU,SAApD,iBAIF,kBAAC,GAAD,CACEK,MAAO7F,EACPuE,QAAS,kBAAMvB,GAAuBmB,U,waC3BvC,IAAM6B,GAAgBrL,IAAOC,IAAV,MAIpBqL,GAAgBC,YAAH,MAUNC,GAAWxL,IAAOyL,IAAV,KAINH,ICMA/K,GAlBe,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAC/BiL,EAAgBlL,EAAKmL,OAAO,GAC5BC,EAAgBnL,EAAKkL,OAAO,GAG5BE,EAAqD,OAAvC,UAAGH,GAAH,OAAmBE,GAA2B,IAAM,GAExE,OACE,kBAACP,GAAD,KACE,kBAACG,GAAD,CACEM,IAAG,wBACiB,MAAlBJ,EAAwB,IAAMA,GAD7B,OAEAE,GAFA,OAEgBC,EAFhB,Y,gKChBI7L,WAAOC,IAAtB,M,oLCAeD,WAAOC,IAAtB,M,qPCIeD,WAAOC,IAAtB,MAEsB,SAACG,GAAD,OAAmBA,EAAM8B,OAAS,UAAY,aC6BrDoH,gBAJS,SAACC,GAAD,MAA+B,CACrDlE,aAAckE,EAAM7D,OAAOL,gBAGW,KAAzBiE,EAxBqB,SAAC,GAAsB,IAApBjE,EAAmB,EAAnBA,aAC/BnD,EAASmD,EAAaP,UAAY,GAExC,OACE,kBAAC,GAAD,KACE,kBAACiH,GAAD,KACG1G,GACCA,EAAarC,KAAKD,KAAI,gBAAGtC,EAAH,EAAGA,KAAMD,EAAT,EAASA,KAAT,OACpB,kBAAC,GAAD,CAAMC,KAAMA,EAAMD,KAAMA,EAAMwL,IAAG,UAAKxL,GAAL,OAAYC,UAGtC,OAAZ4E,QAAY,IAAZA,OAAA,EAAAA,EAAcrC,KAAK5B,QAAS,GAC3B,kBAAC6K,GAAD,CAAW/J,OAAQA,GAChBA,EAAS,OAAH,OAAYmD,QAAZ,IAAYA,OAAZ,EAAYA,EAAcP,e,4cCxBpC,IAAMoH,GAAqBlM,IAAOC,IAAV,MAWlBkM,GAAoBnM,IAAOG,OAAV,MAUjB,SAACC,GAAD,OAAoCA,EAAMC,SAAW,GAAM,KCyBzDiJ,gBAJS,SAACC,GAAD,MAA+B,CACrDlE,aAAckE,EAAM7D,OAAOL,gBAGW,CAAE+G,IhBavB,kBAAgB,SAACvD,GAClC,IAAMwD,EAAgBxI,EAAKuI,MAC3BvD,EAASD,EAAOyD,MgBf6BhG,MhBkB1B,kBAAgB,SAACwC,GACpC,IAAMyD,EAAiBzI,EAAKwC,QAC5BwC,EAASD,EAAO0D,MgBpBoCC,OhBuBhC,kBAAgB,SAAC1D,GACrC,IAAM2D,EAAiB3I,EAAK0I,SAC5B1D,EAASD,EAAO4D,OgBzBHlD,EAjC6B,SAAC,GAKtC,IAJLjE,EAII,EAJJA,aACA+G,EAGI,EAHJA,IACA/F,EAEI,EAFJA,MACAkG,EACI,EADJA,OAEME,EAAiBpH,EAAalC,SAAW7C,EAAa8C,OACtDsJ,GAAmC,OAAZrH,QAAY,IAAZA,OAAA,EAAAA,EAAcrC,KAAK5B,QAAS,EAEzD,OACE,kBAAC8K,GAAD,KACGO,GAAkBC,GACjB,oCACE,kBAACP,GAAD,CAAmBvC,QAASwC,GAA5B,OACA,kBAACD,GAAD,CAAmBvC,QAASvD,GAA5B,UAG0B,IAA7BhB,EAAarC,KAAK5B,QAAgBqL,GACjC,kBAACN,GAAD,CACE9L,SAAUgF,EAAanB,MAAQmB,EAAarB,QAAU,EACtD4F,QAAS2C,GAFX,c,2YC/BD,IAAM1C,GAAU7J,IAAOC,IAAV,MAWP0M,GAAa3M,IAAOC,IAAV,MAIV2M,GAAe5M,IAAOC,IAAV,M,0LCfVD,WAAOC,IAAtB,MCiDeqJ,gBALS,SAACC,GAAD,MAA+B,CACrDnE,OAAQmE,EAAM1F,KAAKuB,OACnBF,QAASqE,EAAM7D,OAAOR,WAGgB,KAAzBoE,EAnCiB,SAAC,GAAyB,IAAvBlE,EAAsB,EAAtBA,OAAQF,EAAc,EAAdA,QAKnC2H,EAHJ,OAAO3H,QAAP,IAAOA,OAAP,EAAOA,EAAS4H,MAAK,SAACpH,GAAD,OAAYA,EAAOvC,SAAW7C,EAAa8C,UAK5DlB,EAASkD,EAAON,UAAY,GAElC,OACE,kBAAC,GAAD,KACE,kBAACiH,GAAD,CAAelB,UAAkC,IAAvBzF,EAAOpC,KAAK5B,OAAe,SAAW,IAC7DgE,GACCA,EAAOpC,KAAKD,KAAI,WAAiB5B,GAAO,IAArBV,EAAoB,EAApBA,KAAMD,EAAc,EAAdA,KACvB,OAAU,IAANW,GAAW0L,EACN,kBAAC,GAAD,CAAMpM,KAAK,IAAID,KAAK,IAAIwL,IAAG,UAAKxL,GAAL,OAAYC,KAGzC,kBAAC,GAAD,CAAMA,KAAMA,EAAMD,KAAMA,EAAMwL,IAAG,UAAKxL,GAAL,OAAYC,SAGzD2E,EAAOpC,KAAK5B,OAAS,GACpB,kBAAC6K,GAAD,CAAW/J,OAAQA,GAChBA,EAAS,OAASkD,EAAON,e,+1CCrC7B,IAAM+E,GAAU7J,IAAOC,IAAV,MAqBP8M,GAAc/M,IAAOC,IAAV,MAMlB+M,GAAiBzB,YAAH,MAcP0B,GAAWjN,IAAOkN,EAAV,KAQNF,IAGFG,GAAWnN,YAAOiN,GAAPjN,CAAH,MAIRoN,GAAYpN,YAAOiN,GAAPjN,CAAH,MAITqN,GAAYrN,YAAOiN,GAAPjN,CAAH,MCHPsN,IDOUtN,IAAOC,IAAV,MC7CO,SAAC,GAKvB,IAJLoF,EAII,EAJJA,aAGAgE,GACI,EAHJ/D,UAGI,EAFJF,OAEI,EADJiE,YAEIkE,EAAY,GAsBhB,OACE,kBAAC,GAAD,KApBGlI,GACDA,EAAapB,cAAgBhB,EAAYkB,aAKvCkB,EAAapB,cAAgBhB,EAAYoE,OAC3CkG,EAAY,YACL,kBAACH,GAAD,sBAAmB/H,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAcrB,UAGtCqB,EAAapB,cAAgBhB,EAAYuE,QAC3C+F,EAAY,YACL,kBAACJ,GAAD,qBAAiB9H,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAcrB,WAExCuJ,EAAY,YACL,kBAACF,GAAD,cAbE,kBAACJ,GAAD,eAA6B,OAAZ5H,QAAY,IAAZA,OAAA,EAAAA,EAAcrB,UAAWqF,GAmBjD,kBAAC0D,GAAD,CAAalC,UAAW0C,GACtB,yBAAKzB,IAAI,6BAA6B0B,IAAI,qBCAnClE,gBAPS,SAACC,GAAD,MAA+B,CACrDlE,aAAckE,EAAM7D,OAAOL,aAC3BC,UAAWiE,EAAM1F,KAAK8E,MACtBvD,OAAQmE,EAAM1F,KAAKuB,OACnBiE,WAAYE,EAAM1F,KAAKwF,cAGe,KAAzBC,EAlCgB,SAAC,GAKzB,IAJLjE,EAII,EAJJA,aACAC,EAGI,EAHJA,UACAF,EAEI,EAFJA,OACAiE,EACI,EADJA,WAEA,OACE,kBAAC,GAAD,KACE,kBAACxC,GAAD,MACA,kBAAC+F,GAAD,QACMvD,IAAF,OAAgBhE,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAcrB,WAC9B,kBAAC,GAAD,CACEqB,aAAcA,EACdC,UAAWA,EACXF,OAAQA,EACRiE,WAAYA,KAIlB,kBAACsD,GAAD,KACE,kBAAC,GAAD,MACA,kBAAC,GAAD,W,4vBC9BR,IAAMc,GAAcC,YAAH,MA0BXC,GAAa3N,IAAOC,IAAV,MAuCDqJ,gBAJS,SAACC,GAAD,MAA+B,CACrDjB,kBAAmBiB,EAAM1F,KAAKyE,qBAGjBgB,EArBc,SAAC,GAA2B,IAAzBhB,EAAwB,EAAxBA,kBAC9B,OACE,kBAACqF,GAAD,KACE,kBAACF,GAAD,MACA,kBAAC,GAAD,MACCnF,EACC,kBAAC,EAAD,MAEA,oCACE,kBAAC,GAAD,MACA,kBAAC,GAAD,W,kCChDJsF,GAA0B,CAC9BjF,MAAO7I,EAAU+N,KACjBvF,mBAAmB,EACnBe,WAAY,EACZjE,OAAQ,CAAEpC,KAAM,GAAI8B,UAAW,ICZ3B8I,GAA4B,CAChCvI,aAAc,KACdH,QAAS,ICNI4I,8BAAgB,CAAEjK,KFmBlB,WAA0D,IAAzD0F,EAAwD,uDAAhDqE,GAAcG,EAAkC,uCACtE,OAAQA,EAAOxF,MACb,IrBtB0B,iBqBuBxB,OAAO,6BAAKgB,GAAZ,IAAmBZ,MAAQoF,EAA0BpF,QACvD,IrBvBoC,2BqBwBlC,OAAO,6BACFY,GADL,IAEEjB,kBAAoByF,EAAyBzF,oBAEjD,IrB1B8B,qBqB2B5B,OAAO,6BACFiB,GADL,IAEEnE,OAAS2I,EAA8B3I,SAE3C,IrB9B2B,kBqB+BzB,OAAO,6BACFmE,GADL,IAEEF,WAAa0E,EAAyB1E,aAE1C,QACE,OAAOE,IEvCuC7D,ODSrC,WAA8D,IAA7D6D,EAA4D,uDAApDqE,GAAcG,EAAsC,uCAC1E,OAAQA,EAAOxF,MACb,ItBdyB,gBsBevB,OAAO,6BACFgB,GADL,IAEErE,QAAQ,GAAD,mBACFqE,EAAMrE,QAAQ8I,QACf,SAACtI,GAAD,OAAYA,EAAO3B,OAAUgK,EAA2BrI,OAAO3B,SAF5D,CAIJgK,EAA2BrI,WAGlC,ItBpB6B,oBsBqB3B,OAAO,6BACF6D,GADL,IAEElE,aAAe0I,EAAiC1I,eAEpD,QACE,OAAOkE,MEzBP0E,GAAa,CAACC,MAOLC,GANDC,uBACZC,GAH0B,GAK1BC,+BAAoBC,mBAAe,WAAf,EAAmBN,MCJzCO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUP,MAAOA,IACf,kBAAC,GAAD,QAGJQ,SAASC,eAAe,W","file":"static/js/main.21a3cf10.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const MenuWrapper = styled.div`\n  display: flex;\n  height: 100%;\n  flex-direction: column;\n  justify-content: center;\n  padding: 3rem;\n  background-image: linear-gradient(\n      to bottom,\n      rgba(33, 33, 33, 0.3),\n      rgba(33, 33, 33, 0.45)\n    ),\n    url(assets/images/card-bg.jpg);\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;\n  transition: all 1s;\n`;\n\nexport const MenuButton = styled.button`\n  text-shadow: 0 1px 0 #000;\n  color: #fff;\n  text-transform: uppercase;\n  letter-spacing: 2px;\n  background-color: transparent;\n  border: 3px solid transparent;\n  font-size: 2.5rem;\n  font-weight: 500;\n  padding: 0.5rem;\n  margin-bottom: 8rem;\n  transition: all 1s;\n  opacity: ${(props) => (props.disabled ? 0.5 : 1)};\n\n  &:hover {\n    border: ${(props) =>\n      props.disabled ? '3px solid transparent' : '3px solid #fff'};\n  }\n`;\n\nexport const NewGameButton = styled(MenuButton)``;\n","enum GamePhase {\n  Menu = 'Menu',\n  Betting = 'Betting',\n  PlayerHand = 'PlayerHand',\n  DealerHand = 'DealerHand',\n  Results = 'Results',\n}\n\nexport default GamePhase;\n","// eslint-disable-next-line import/prefer-default-export\nexport enum PlayerStatus {\n  Active = 'Active',\n  Stand = 'Stand',\n  Bust = 'Bust',\n}\n","import { Suit } from '../../types/Suit';\nimport { Rank } from '../../types/Rank';\n\nexport default class Card {\n  private suit: Suit;\n\n  private rank: Rank;\n\n  constructor(rank: Rank, suit: Suit) {\n    this.suit = suit;\n    this.rank = rank;\n  }\n\n  /**\n   * Returns the suit of the card.\n   * @returns {Suit}\n   */\n  public getSuit(): Suit {\n    return this.suit;\n  }\n\n  /**\n   * Returns the rank of the card.\n   * @returns {Rank}\n   */\n  public getRank(): Rank {\n    return this.rank;\n  }\n\n  /**\n   * Returns the name of the card indicating the rank and suit.\n   * @returns {string}\n   */\n  public getName(): string {\n    return `${this.rank} of ${this.suit}`;\n  }\n}\n","import { Suit } from '../types/Suit';\nimport { Rank } from '../types/Rank';\n\nexport const SUITS: Suit[] = ['Hearts', 'Spades', 'Diamonds', 'Clubs'];\n\nexport const RANKS: Rank[] = [\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  '10',\n  'Jack',\n  'Queen',\n  'King',\n  'Ace',\n];\n\nexport const NUMBER_OF_DECKS = 8;\n\nexport const NUMBER_OF_CARDS_PER_DECK = 52;\n\nexport const STANDARD_WIN_MULTIPLIER = 2;\n\nexport const BLACKJACK_WIN_MULTIPLIER = 2.5;\n","import Card from '../Card';\nimport { SUITS, RANKS, NUMBER_OF_DECKS } from '../../constants';\n\nexport default class Deck {\n  private cards: Card[] = [];\n\n  constructor() {\n    this.generateCards();\n    this.shuffle();\n  }\n\n  /**\n   * Sets up the deck by generating the standard set of cards based on deck count.\n   */\n  private generateCards(): void {\n    const singleDeck: Card[] = [];\n\n    for (const suit of SUITS) {\n      for (const rank of RANKS) {\n        singleDeck.push(new Card(rank, suit));\n      }\n    }\n\n    for (let i = 0; i < NUMBER_OF_DECKS; i += 1) {\n      this.cards = [...this.cards, ...singleDeck];\n    }\n  }\n\n  /**\n   * Shuffles the deck.\n   * @returns {void}\n   */\n  public shuffle(): void {\n    const {\n      cards,\n      cards: { length },\n    } = this;\n\n    for (let i = 0; i < length; i += 1) {\n      const randomIndex = Math.floor(Math.random() * length);\n      const temp = cards[randomIndex];\n      cards[randomIndex] = cards[i];\n      cards[i] = temp;\n    }\n  }\n\n  /**\n   * Returns the card array from the deck.\n   * @returns {Card[]}\n   */\n  public getCards(): Card[] {\n    return this.cards;\n  }\n\n  /**\n   * Draws a card from the deck.\n   */\n  public drawCard(): Card {\n    if (this.cards.length === 0) {\n      this.generateCards();\n    }\n\n    return this.cards.pop() as Card;\n  }\n}\n","export default class Stack {\n  private chips = 0;\n\n  constructor(startingChips: number) {\n    this.chips = startingChips;\n  }\n\n  /**\n   * Adds chips to the stack.\n   * @param amount\n   */\n  public addChips(amount: number): void {\n    this.chips += amount;\n  }\n\n  /**\n   * Removes chips from the stack.\n   * @param amount\n   */\n  public removeChips(amount: number): void {\n    if (amount >= this.chips) {\n      this.chips = 0;\n    } else {\n      this.chips -= amount;\n    }\n  }\n\n  /**\n   * Returns the stack amount\n   */\n  public getChips(): number {\n    return this.chips;\n  }\n}\n","import Card from '../Card';\nimport { Rank } from '../../types/Rank';\nimport { Suit } from '../../types/Suit';\n\ninterface StoredHand {\n  cards: { suit: string; rank: string }[];\n  isBlackJack: boolean;\n  isBust: boolean;\n  value: number;\n}\nexport default class Hand {\n  private cards: Card[] = [];\n\n  private value = 0;\n\n  private isBlackJack = false;\n\n  private isBust = false;\n\n  /**\n   * Returns the cards contained in the hand.\n   * @returns {Card[]}\n   */\n  public getCards(): Card[] {\n    return this.cards;\n  }\n\n  public static createHandFromStorageData({\n    cards,\n    isBlackJack,\n    isBust,\n    value,\n  }: StoredHand): Hand {\n    const formattedCards = cards.map(\n      (card: { suit: string; rank: string }) =>\n        new Card(card.rank as Rank, card.suit as Suit),\n    );\n\n    const hand = new Hand();\n    hand.cards = formattedCards;\n    hand.isBlackJack = isBlackJack;\n    hand.isBust = isBust;\n    hand.value = value;\n\n    return hand;\n  }\n\n  /**\n   * Returns the value of the hand\n   * @returns {number}\n   */\n  public getValue(): number {\n    return this.value;\n  }\n\n  /**\n   * Returns whether or not the hand is a blackjack\n   * @returns {number}\n   */\n  public getIsBlackJack(): boolean {\n    return this.isBlackJack;\n  }\n\n  /**\n   * Returns whether or not the hand is bust.\n   * @returns {number}\n   */\n  public getIsBust(): boolean {\n    return this.isBust;\n  }\n\n  /**\n   * Adds a Card object to the hand.\n   * @param card\n   */\n  public addCard(card: Card): void {\n    this.cards.push(card);\n    this.calculateHandValue();\n  }\n\n  /**\n   * Calculates the total value of the hand.\n   */\n  private calculateHandValue(): void {\n    // simplify calculations by moving Aces to the back of the hand.\n    const sortedHand: Card[] = [...this.cards].sort((a) =>\n      a.getRank() === 'Ace' ? 1 : -1,\n    );\n\n    const total: number = sortedHand.reduce((acc, card) => {\n      const rank = card.getRank();\n\n      if (rank === 'Ace') {\n        return acc >= 11 ? acc + 1 : acc + 11;\n      }\n      if (['Jack', 'Queen', 'King'].includes(rank)) {\n        return acc + 10;\n      }\n      return acc + Number(rank);\n    }, 0);\n\n    if (total >= 22) {\n      this.isBust = true;\n    }\n\n    if (total === 21 && sortedHand.length === 2) {\n      this.isBlackJack = true;\n    }\n\n    this.value = total;\n  }\n}\n","enum HandOutcome {\n  Undetermined = 'Undetermined',\n  Loser = 'Loser',\n  Winner = 'Winner',\n  Push = 'Push',\n}\n\nexport default HandOutcome;\n","import Hand from '../Hand';\nimport { PlayerStatus } from '../../types/PlayerStatus';\nimport Card from '../Card';\nimport { SerializedHand } from '../../types/SerializedHand';\n\nexport default class Dealer {\n  protected hand: Hand;\n\n  protected status: PlayerStatus;\n\n  constructor(hand?: Hand, status?: PlayerStatus) {\n    this.hand = hand ?? new Hand();\n    this.status = status ?? PlayerStatus.Active;\n  }\n\n  /**\n   * Adds a card to the hand.\n   * @param card\n   */\n  public addCard(card: Card): void {\n    this.hand.addCard(card);\n    if (this.hand.getIsBust()) {\n      this.status = PlayerStatus.Bust;\n    }\n  }\n\n  /**\n   * Puts the dealer in a 'stand' state.\n   */\n  public stand(): void {\n    this.status = PlayerStatus.Stand;\n  }\n\n  /**\n   * Returns the dealer's hand.\n   */\n  public getHand(): Hand {\n    return this.hand;\n  }\n\n  /**\n   * Returns the dealer's hand value.\n   */\n  public getHandValue(): number {\n    return this.hand.getValue();\n  }\n\n  /**\n   * Returns a boolean indicating if the dealer's hand is busted.\n   */\n  public isBust(): boolean {\n    return this.hand.getIsBust();\n  }\n\n  /**\n   * Returns whether or not the current hand is a BlackJack.\n   */\n  public isHoldingBlackjack(): boolean {\n    return this.hand.getIsBlackJack();\n  }\n\n  /**\n   * Returns dealer's status\n   */\n  public getStatus(): PlayerStatus {\n    return this.status;\n  }\n\n  /**\n   * Discards current hand and replaces it with a new hand.\n   */\n  public drawNewHand(): void {\n    this.hand = new Hand();\n  }\n\n  /**\n   * Returns the serialized form of the hand for storage.\n   */\n  public serializeHand(): SerializedHand {\n    return this.hand\n      .getCards()\n      .map((card) => ({ suit: card.getSuit(), rank: card.getRank() }));\n  }\n}\n","import GamePhase from '../types/GamePhase';\nimport {\n  SET_GAME_PHASE,\n  SET_GAME_MENU_VISIBILITY,\n  UPDATE_PLAYER,\n  SET_ACTIVE_PLAYER,\n  UPDATE_DEALER_HAND,\n  SET_TRAY_AMOUNT,\n} from './types';\nimport Game, { CreatedPlayer } from '../game';\nimport { AppThunk } from '../types/AppThunk';\nimport { GameAction } from '../types/GameAction';\nimport { PlayerAction } from '../types/PlayerAction';\nimport SerializedPlayer from '../types/SerializedPlayer';\n\nlet game: Game;\n\nexport const startGame = (players: CreatedPlayer[]): AppThunk => (dispatch) => {\n  game = new Game(players);\n  dispatch(setGamePhase(GamePhase.Betting));\n  dispatch(setGameMenuVisibility(false));\n  dispatch(setActivePlayer());\n  dispatch(updateDealer());\n};\n\nexport const setGameMenuVisibility = (\n  isGameMenuVisible: boolean,\n): GameAction => ({\n  type: SET_GAME_MENU_VISIBILITY,\n  isGameMenuVisible,\n});\n\nexport const setActivePlayer = (): PlayerAction => ({\n  type: SET_ACTIVE_PLAYER,\n  activePlayer: game.getSerializedActivePlayer(),\n});\n\nexport const setGamePhase = (phase: GamePhase): GameAction => ({\n  type: SET_GAME_PHASE,\n  phase,\n});\n\nexport const update = (player: SerializedPlayer): AppThunk => (dispatch) => {\n  dispatch({\n    type: UPDATE_PLAYER,\n    player,\n  });\n  dispatch(setActivePlayer());\n  dispatch(updateDealer());\n  dispatch(setGamePhase(game.getGamePhase()));\n\n  if (game.getGamePhase() === GamePhase.Results) {\n    setTimeout(() => dispatch(startNewRound()), 3000);\n  }\n};\n\nexport const bet = (amount: number): AppThunk => (dispatch) => {\n  const bettingPlayer = game.bet(amount);\n  dispatch(update(bettingPlayer));\n};\n\nexport const hit = (): AppThunk => (dispatch) => {\n  const hittingPlayer = game.hit();\n  dispatch(update(hittingPlayer));\n};\n\nexport const stand = (): AppThunk => (dispatch) => {\n  const standingPlayer = game.stand();\n  dispatch(update(standingPlayer));\n};\n\nexport const double = (): AppThunk => (dispatch) => {\n  const doublingPlayer = game.double();\n  dispatch(update(doublingPlayer));\n};\n\nexport const updateDealer = (): AppThunk => (dispatch) => {\n  const hand = game.getDealer().serializeHand();\n  const handValue = game.getDealer().getHandValue();\n\n  dispatch({\n    type: UPDATE_DEALER_HAND,\n    dealer: { hand, handValue },\n  });\n};\n\nexport const playDealerHand = (): AppThunk => (dispatch) => {\n  game.playDealerHand();\n  dispatch(updateDealer());\n  dispatch({\n    type: UPDATE_PLAYER,\n    player: game.getSerializedActivePlayer(),\n  });\n};\n\nexport const setTrayAmount = (trayAmount: number): GameAction => ({\n  type: SET_TRAY_AMOUNT,\n  trayAmount,\n});\n\nexport const startNewRound = (): AppThunk => (dispatch) => {\n  game.startNewRound();\n  dispatch(setTrayAmount(0));\n  dispatch(update(game.getSerializedActivePlayer()));\n};\n\nexport const saveGame = (): AppThunk => (dispatch) => {\n  if (!game) {\n    throw new Error('There is no game instance to save the game state.');\n  }\n\n  game.saveGame();\n};\n\nexport const loadGame = (): AppThunk => (dispatch) => {\n  if (!game) {\n    game = new Game([{ name: 'foo', startingChips: 1000 }]);\n  }\n\n  game.loadGame();\n  dispatch(update(game.getSerializedActivePlayer()));\n};\n","import Stack from '../Stack';\nimport {\n  STANDARD_WIN_MULTIPLIER,\n  BLACKJACK_WIN_MULTIPLIER,\n} from '../../constants';\nimport Dealer from '../Dealer';\nimport { PlayerStatus } from '../../types/PlayerStatus';\nimport Card from '../Card';\nimport SerializedPlayer from '../../types/SerializedPlayer';\nimport HandOutcome from '../../types/HandOutcome';\nimport Hand from '../Hand';\n\nexport default class Player extends Dealer {\n  private name: string;\n\n  private stack: Stack;\n\n  private betSize: number;\n\n  private handOutcome: HandOutcome;\n\n  constructor(\n    name: string,\n    startingChips: number,\n    betSize?: number,\n    handOutcome?: HandOutcome,\n    hand?: Hand,\n    status?: PlayerStatus,\n  ) {\n    super(hand, status);\n    this.name = name;\n    this.stack = new Stack(startingChips);\n    this.betSize = betSize ?? 0;\n    this.handOutcome = handOutcome ?? HandOutcome.Undetermined;\n  }\n\n  /**\n   * Returns the player's name.\n   */\n  public getName(): string {\n    return this.name;\n  }\n\n  /**\n   * Returns the player's chip stack.\n   */\n  public getStack(): Stack {\n    return this.stack;\n  }\n\n  /**\n   * Places a bet amount for the player.\n   * @param amount the number of chips to wager.\n   */\n  public bet(amount: number): void {\n    const chipStackAmount = this.stack.getChips();\n    if (amount > chipStackAmount) {\n      throw new Error(\n        `Wager of ${amount} exceeds the $${chipStackAmount} chip stack.`,\n      );\n    }\n\n    this.stack.removeChips(amount);\n    this.betSize += amount;\n  }\n\n  /**\n   * Applies the win multiplier to the player's wager amount and adds it to the chip stack.\n   */\n  public applyWinMultiplier(): void {\n    if (this.status === PlayerStatus.Bust) {\n      throw new Error('Win condition called for busted player.');\n    }\n\n    const winAmount = this.hand.getIsBlackJack()\n      ? this.betSize * BLACKJACK_WIN_MULTIPLIER\n      : this.betSize * STANDARD_WIN_MULTIPLIER;\n\n    this.stack.addChips(winAmount);\n  }\n\n  /**\n   * Handles draw situations by returning bet chips to stack.\n   */\n  public handlePush(): void {\n    this.stack.addChips(this.betSize);\n  }\n\n  /**\n   * Returns the chip stack value for the player.\n   */\n  public getChipValue(): number {\n    return this.stack.getChips();\n  }\n\n  /**\n   * Returns the player's bet size.\n   */\n  public getBetSize(): number {\n    return this.betSize;\n  }\n\n  /**\n   * Performs a double down action for the player.\n   * @param card card to be added to hand.\n   */\n  public doubleDown(card: Card): void {\n    this.addCard(card);\n    this.bet(this.betSize);\n\n    if (!this.isBust()) {\n      this.status = PlayerStatus.Stand;\n    }\n  }\n\n  /**\n   * Resets bet size for a new round.\n   */\n  public resetBetSize(): void {\n    this.betSize = 0;\n  }\n\n  /**\n   * Resets the player's hand, chips, and hand outcome.\n   */\n  public resetPlayer(): void {\n    super.drawNewHand();\n    this.resetBetSize();\n    this.handOutcome = HandOutcome.Undetermined;\n    this.status = PlayerStatus.Active;\n  }\n\n  /**\n   * Sets the outcome of the hand.\n   * @param outcome\n   */\n  public setHandOutcome(outcome: HandOutcome): void {\n    this.handOutcome = outcome;\n  }\n\n  /**\n   * Sets the outcome of the hand.\n   * @param outcome\n   */\n  public getHandOutcome(): HandOutcome {\n    return this.handOutcome;\n  }\n\n  /**\n   * Returns the serialized form of the player for storage.\n   */\n  public serialize(): SerializedPlayer {\n    return {\n      name: this.name,\n      hand: this.hand\n        .getCards()\n        .map((card) => ({ suit: card.getSuit(), rank: card.getRank() })),\n      status: this.status,\n      stack: this.getChipValue(),\n      betSize: this.betSize,\n      handValue: this.getHandValue(),\n      handOutcome: this.getHandOutcome(),\n    };\n  }\n}\n","import Deck from './Deck';\nimport Player from './Player';\nimport Dealer from './Dealer';\nimport { PlayerStatus } from '../types/PlayerStatus';\nimport GamePhase from '../types/GamePhase';\nimport SerializedPlayer from '../types/SerializedPlayer';\nimport HandOutcome from '../types/HandOutcome';\nimport Hand from './Hand';\n\nexport interface CreatedPlayer {\n  name: string;\n  startingChips: number;\n}\n\nconst STARTING_HAND_SIZE = 2;\n\nexport default class Game {\n  private deck: Deck;\n\n  private players: Player[];\n\n  private dealer: Dealer;\n\n  private activePlayer: Player;\n\n  private gamePhase: GamePhase;\n\n  constructor(players: CreatedPlayer[]) {\n    this.deck = new Deck();\n    this.dealer = new Dealer();\n    this.players = players.map(\n      ({ name, startingChips }) => new Player(name, startingChips),\n    );\n    const [firstPlayer] = this.players;\n    this.activePlayer = firstPlayer;\n    this.gamePhase = GamePhase.Betting;\n  }\n\n  /**\n   * Returns a player searched for by name.\n   * @param playerName string representing the player's name to find.\n   * @returns {Player}\n   */\n  public findPlayerByName(playerName: string): Player {\n    const player = this.players.find(\n      (player) => player.getName() === playerName,\n    );\n\n    if (!player) {\n      throw new Error(`Could not find player ${playerName}`);\n    }\n\n    return player;\n  }\n\n  /**\n   * Returns the dealer object.\n   */\n  public getDealer(): Dealer {\n    return this.dealer;\n  }\n\n  /**\n   * Returns the player Array.\n   */\n  public getPlayers(): Player[] {\n    return this.players;\n  }\n\n  /**\n   * Returns the current active player.\n   */\n  public getActivePlayerName(): string {\n    return this.activePlayer.getName();\n  }\n\n  /**\n   * Deals the starting hands for the dealer and all players.\n   */\n  public dealStartingHands(): void {\n    this.dealer.drawNewHand();\n    this.players.forEach((player) => player.drawNewHand());\n\n    for (let i = 0; i < STARTING_HAND_SIZE; i += 1) {\n      this.players.forEach((player) => player.addCard(this.deck.drawCard()));\n      this.dealer.addCard(this.deck.drawCard());\n    }\n    this.gamePhase = GamePhase.PlayerHand;\n  }\n\n  /**\n   * Deals a card to an active player.\n   * @param playerName string representing the player's name\n   */\n  public hit(): SerializedPlayer {\n    const player = this.activePlayer;\n\n    if (player.getStatus() !== PlayerStatus.Active) {\n      throw new Error('Cannot deal card to an inactive player.');\n    }\n\n    const card = this.deck.drawCard();\n    player.addCard(card);\n\n    if (player.isBust() || player.isHoldingBlackjack()) {\n      this.nextActivePlayer();\n    }\n    return player.serialize();\n  }\n\n  /**\n   * Sets a player's hand status to stand.\n   * @param playerName the player's name\n   */\n  public stand(): SerializedPlayer {\n    const player = this.activePlayer;\n\n    if (player.getStatus() !== PlayerStatus.Active) {\n      throw new Error('Player cannot stand when not in an active state');\n    }\n\n    player.stand();\n    this.nextActivePlayer();\n    return player.serialize();\n  }\n\n  /**\n   * Sets a player's hand status to stand.\n   * @param playerName the player's name\n   */\n  public double(): SerializedPlayer {\n    const player = this.activePlayer;\n\n    if (player.getStatus() !== PlayerStatus.Active) {\n      throw new Error('Player cannot double when not in an active state');\n    }\n\n    if (player.getHand().getCards().length !== 2) {\n      throw new Error('Player can only double with two cards in hand.');\n    }\n\n    const card = this.deck.drawCard();\n    player.doubleDown(card);\n    this.nextActivePlayer();\n    return player.serialize();\n  }\n\n  /**\n   * Gives a turn to the next active player.\n   */\n  public nextActivePlayer(): void {\n    const activePlayerIndex = this.players.findIndex(\n      (player) => player.getName() === this.activePlayer.getName(),\n    );\n\n    if (!Number.isInteger(activePlayerIndex)) {\n      throw new Error('Failed to find the index of the active player');\n    }\n\n    this.activePlayer = this.players[\n      (activePlayerIndex + 1) % this.players.length\n    ];\n\n    if (activePlayerIndex === this.players.length - 1) {\n      if (this.gamePhase === GamePhase.Betting) {\n        this.dealStartingHands();\n      } else {\n        this.playDealerHand();\n      }\n    }\n  }\n\n  /**\n   * Places a bet for the active player\n   * @param playerName\n   * @param amount\n   */\n\n  public bet(amount: number): SerializedPlayer {\n    const player = this.activePlayer;\n    player.bet(amount);\n    this.nextActivePlayer();\n    return player.serialize();\n  }\n\n  /**\n   * Plays out the dealer's hand. Stands on soft 17.\n   */\n  public playDealerHand(): void {\n    this.gamePhase = GamePhase.DealerHand;\n\n    while (this.dealer.getHandValue() < 17) {\n      this.dealer.addCard(this.deck.drawCard());\n    }\n\n    if (!this.dealer.isBust()) {\n      this.dealer.stand();\n    }\n\n    this.gamePhase = GamePhase.Results;\n    this.endRound();\n  }\n\n  /**\n   * Handles the outcome at the end of the hand.\n   */\n  public endRound(): void {\n    const dealerHandValue = this.dealer.getHandValue();\n    const dealerHasBlackjack = this.dealer.isHoldingBlackjack();\n\n    this.players.forEach((player) => {\n      const playerHasBlackjack = player.isHoldingBlackjack();\n      const playerHandValue = player.getHandValue();\n\n      if (\n        player.isBust() ||\n        (!this.dealer.isBust() && dealerHandValue > playerHandValue) ||\n        (dealerHasBlackjack && !playerHasBlackjack)\n      ) {\n        player.setHandOutcome(HandOutcome.Loser);\n        return;\n      }\n\n      if (playerHandValue === dealerHandValue) {\n        player.setHandOutcome(HandOutcome.Push);\n        player.handlePush();\n      }\n\n      if (this.dealer.isBust() || playerHandValue > dealerHandValue) {\n        player.setHandOutcome(HandOutcome.Winner);\n        player.applyWinMultiplier();\n      }\n    });\n  }\n\n  /**\n   * Serializes the current active player.\n   */\n  public getSerializedActivePlayer(): SerializedPlayer {\n    const activePlayer = this.players.find(\n      (player) => player.getName() === this.activePlayer.getName(),\n    );\n\n    if (!activePlayer) {\n      throw new Error('Could not retrieve active player');\n    }\n\n    return activePlayer.serialize();\n  }\n\n  /**\n   * Returns the current game phase.\n   */\n  public getGamePhase(): GamePhase {\n    return this.gamePhase;\n  }\n\n  /**\n   * Resets card/bet state and starts a new round.\n   */\n  public startNewRound(): void {\n    this.dealer.drawNewHand();\n    this.players.forEach((player) => {\n      player.resetPlayer();\n    });\n\n    this.gamePhase = GamePhase.Betting;\n  }\n\n  public saveGame(): void {\n    localStorage.setItem('game', JSON.stringify(this));\n  }\n\n  public loadGame(): void {\n    const storedGame = localStorage.getItem('game');\n\n    if (!storedGame) {\n      throw new Error('Could not find game data to load');\n    }\n\n    const parsedGame = JSON.parse(storedGame);\n\n    this.players = [];\n    this.deck = new Deck();\n    parsedGame.players.forEach((player) => {\n      const playerHand: Hand = Hand.createHandFromStorageData(player.hand);\n      this.players = [\n        ...this.players,\n        new Player(\n          player.name,\n          player.stack.chips,\n          player.betSize,\n          player.handOutcome,\n          playerHand,\n          player.status,\n        ),\n      ];\n    });\n    this.dealer = new Dealer(\n      Hand.createHandFromStorageData(parsedGame.dealer.hand),\n      parsedGame.dealer.status,\n    );\n\n    const activePlayer = this.players.find(\n      (player) => player.getName() === parsedGame.activePlayer.name,\n    );\n\n    if (!activePlayer)\n      throw new Error('Could not find active player in stored data');\n\n    this.activePlayer = activePlayer;\n    this.gamePhase = parsedGame.gamePhase;\n  }\n}\n","export const SET_DECK = 'SET_DECK';\nexport const UPDATE_PLAYER = 'UPDATE_PLAYER';\nexport const ADD_PLAYER = 'ADD_PLAYER';\nexport const SET_GAME_PHASE = 'SET_GAME_PHASE';\nexport const SET_GAME_MENU_VISIBILITY = 'SET_GAME_MENU_VISIBILITY';\nexport const SET_ACTIVE_PLAYER = 'SET_ACTIVE_PLAYER';\nexport const UPDATE_DEALER_HAND = 'UPDATE_DEALER_HAND';\nexport const SET_TRAY_AMOUNT = 'SET_TRAY_AMOUNT';\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { MenuWrapper, MenuButton } from './style';\nimport {\n  startGame,\n  saveGame,\n  loadGame,\n  setGameMenuVisibility,\n} from '../../actions';\nimport { CreatedPlayer } from '../../game';\nimport { GameAction } from '../../types/GameAction';\nimport SerializedPlayer from '../../types/SerializedPlayer';\nimport CombinedRootState from '../../types/CombinedRootState';\n\ninterface Props {\n  startGame: (players: CreatedPlayer[]) => void;\n  saveGame: () => void;\n  loadGame: () => void;\n  isMenuVisible: boolean;\n  setGameMenuVisibility: (isGameMenuVisible: boolean) => GameAction;\n  activePlayer: SerializedPlayer | null;\n}\n\nconst GameMenu: React.FC<Props> = ({\n  startGame,\n  saveGame,\n  loadGame,\n  setGameMenuVisibility,\n  isMenuVisible,\n  activePlayer,\n}) => {\n  return (\n    <MenuWrapper>\n      <MenuButton\n        onClick={() => startGame([{ name: 'foo', startingChips: 5000 }])}\n      >\n        New Game\n      </MenuButton>\n      <MenuButton\n        disabled={!activePlayer}\n        onClick={() => {\n          saveGame();\n          setGameMenuVisibility(!isMenuVisible);\n        }}\n      >\n        Save Game\n      </MenuButton>\n      <MenuButton\n        disabled={!localStorage.getItem('game')}\n        onClick={() => {\n          loadGame();\n          setGameMenuVisibility(!isMenuVisible);\n        }}\n      >\n        Load Game\n      </MenuButton>\n    </MenuWrapper>\n  );\n};\n\nconst mapStateToProps = (state: CombinedRootState) => ({\n  isMenuVisible: state.game.isGameMenuVisible,\n  activePlayer: state.player.activePlayer,\n});\n\nexport default connect(mapStateToProps, {\n  startGame,\n  saveGame,\n  loadGame,\n  setGameMenuVisibility,\n})(GameMenu);\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  width: 100%;\n`;\n\nexport const Tray = styled.div`\n  padding: 0 0 1.5rem 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #2c3e50;\n\n  .chips {\n    display: flex;\n    justify-content: space-around;\n    width: 30rem;\n  }\n\n  .chip-red {\n    background-image: url(assets/images/chip-red.svg);\n  }\n  .chip-blue {\n    background-image: url(assets/images/chip-blue.svg);\n  }\n  .chip-green {\n    background-image: url(assets/images/chip-green.svg);\n  }\n  .chip-purple {\n    background-image: url(assets/images/chip-purple.svg);\n  }\n  .chip-black {\n    background-image: url(assets/images/chip-black.svg);\n  }\n`;\n\nexport const Chip = styled.button`\n  border: none;\n  color: #fff;\n  width: 5rem;\n  height: 5rem;\n  border-radius: 50%;\n  background-color: transparent;\n  font-weight: 500;\n  text-align: center;\n  cursor: pointer;\n  background-size: cover;\n`;\n\nexport const StackImage = styled.div`\n  background-image: url(assets/images/stack.svg);\n  background-repeat: no-repeat;\n  background-size: cover;\n  width: 2rem;\n  height: 2rem;\n`;\n\nexport const StackContainer = styled.div`\n  display: flex;\n  align-items: center;\n  border: 1px dashed #fff;\n  padding: 0.1rem;\n`;\n\nexport const StackDisplay = styled.h3`\n  color: #fff;\n  font-size: 1.5rem;\n  align-self: center;\n  min-width: 3ch;\n`;\n\nexport const ControlButton = styled.button`\n  border: none;\n  padding: 0 1.5rem;\n  border-radius: 4px;\n  color: #fff;\n  opacity: ${(props) => (props.disabled ? 0.5 : 1)};\n  background-color: #27ae60;\n  text-transform: uppercase;\n  cursor: ${(props) => (props.disabled ? 'not-allowed' : 'pointer')};\n  font-size: 1.2rem;\n  margin: 0 1.5rem;\n`;\n\nexport const ControlPanel = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 1rem 0 0.4rem 0;\n\n  @media only screen and (min-width: 405px) {\n    margin: 1rem;\n  }\n`;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bet, setTrayAmount } from '../../actions';\nimport {\n  Tray,\n  Chip,\n  StackDisplay,\n  Wrapper,\n  ControlButton,\n  ControlPanel,\n  StackImage,\n  StackContainer,\n} from './style';\nimport SerializedPlayer from '../../types/SerializedPlayer';\nimport CombinedRootState from '../../types/CombinedRootState';\nimport { GameAction } from '../../types/GameAction';\nimport GamePhase from '../../types/GamePhase';\n\ninterface Props {\n  bet: (amount: number) => void;\n  setTrayAmount: (trayAmount: number) => GameAction;\n  activePlayer?: SerializedPlayer | null;\n  gamePhase: GamePhase;\n}\n\nconst ChipTray: React.FC<Props> = ({\n  bet,\n  activePlayer,\n  setTrayAmount,\n  gamePhase,\n}) => {\n  const [betAmount, setBetAmount] = useState<number>(0);\n\n  const handleClick = (amount: number): void => {\n    if (activePlayer?.stack - betAmount - amount < 0) return;\n    setBetAmount((previousAmount) => previousAmount + amount);\n    setTrayAmount(betAmount + amount);\n  };\n\n  const clearBet = () => {\n    setBetAmount(0);\n    setTrayAmount(0);\n  };\n\n  const isBettingPhase = gamePhase === GamePhase.Betting;\n\n  return (\n    <Wrapper>\n      <Tray>\n        <ControlPanel>\n          <ControlButton\n            onClick={clearBet}\n            disabled={!betAmount || !isBettingPhase}\n          >\n            Clear\n          </ControlButton>\n          <StackContainer>\n            <StackImage />\n            <StackDisplay>${activePlayer?.stack - betAmount}</StackDisplay>\n          </StackContainer>\n          <ControlButton\n            disabled={!betAmount || !isBettingPhase}\n            onClick={() => {\n              bet(betAmount);\n              setBetAmount(0);\n            }}\n          >\n            Deal\n          </ControlButton>\n        </ControlPanel>\n        <div className=\"chips\">\n          <Chip\n            className=\"chip-red\"\n            onClick={() => handleClick(1)}\n            disabled={!isBettingPhase}\n          >\n            1\n          </Chip>\n          <Chip\n            className=\"chip-green\"\n            onClick={() => handleClick(5)}\n            disabled={!isBettingPhase}\n          >\n            5\n          </Chip>\n          <Chip\n            className=\"chip-purple\"\n            onClick={() => handleClick(25)}\n            disabled={!isBettingPhase}\n          >\n            25\n          </Chip>\n          <Chip\n            className=\"chip-blue\"\n            onClick={() => handleClick(50)}\n            disabled={!isBettingPhase}\n          >\n            50\n          </Chip>\n          <Chip\n            className=\"chip-black\"\n            onClick={() => handleClick(100)}\n            disabled={!isBettingPhase}\n          >\n            100\n          </Chip>\n        </div>\n      </Tray>\n    </Wrapper>\n  );\n};\n\nconst mapStateToProps = (state: CombinedRootState) => ({\n  activePlayer: state.player.activePlayer,\n  gamePhase: state.game.phase,\n});\n\nexport default connect(mapStateToProps, {\n  bet,\n  setTrayAmount,\n})(ChipTray);\n","import styled from 'styled-components';\n\nexport const StyledHeader = styled.header`\n  background-color: #2c3e50;\n  text-transform: uppercase;\n  display: flex;\n  justify-content: space-between;\n\n  .emoji {\n    font-size: 2rem;\n  }\n`;\n\nexport const Title = styled.h1`\n  color: #fff;\n  letter-spacing: 1.5px;\n  margin-left: 1rem;\n  font-size: 1.5rem;\n`;\n\ninterface MenuButtonProps {\n  hide: boolean;\n}\n\nexport const MenuButton = styled.button`\n  visibility: ${(props: MenuButtonProps) =>\n    props.hide ? 'hidden' : 'visible'};\n  border: none;\n  width: 3rem;\n  height: 3rem;\n  margin-right: 0.5rem;\n  cursor: pointer;\n  background-color: inherit;\n  background-size: cover;\n  background-image: url(assets/images/menu.svg);\n  background-repeat: no-repeat;\n`;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { StyledHeader, Title, MenuButton } from './style';\nimport CombinedRootState from '../../types/CombinedRootState';\nimport { setGameMenuVisibility } from '../../actions';\nimport { GameAction } from '../../types/GameAction';\nimport SerializedPlayer from '../../types/SerializedPlayer';\n\ninterface Props {\n  isMenuVisible: boolean;\n  setGameMenuVisibility: (isGameMenuVisible: boolean) => GameAction;\n  activePlayer: SerializedPlayer | null;\n}\n\nconst Header: React.FC<Props> = ({\n  setGameMenuVisibility,\n  isMenuVisible,\n  activePlayer,\n}) => {\n  return (\n    <StyledHeader>\n      <Title>\n        React Blackjack{' '}\n        <span role=\"img\" aria-label=\"Spade Emoji\" className=\"emoji\">\n          ♠️\n        </span>\n      </Title>\n      <MenuButton\n        hide={!activePlayer}\n        onClick={() => setGameMenuVisibility(!isMenuVisible)}\n      />\n    </StyledHeader>\n  );\n};\n\nconst mapStateToProps = (state: CombinedRootState) => ({\n  isMenuVisible: state.game.isGameMenuVisible,\n  activePlayer: state.player.activePlayer,\n});\n\nexport default connect(mapStateToProps, { setGameMenuVisibility })(Header);\n","import styled, { keyframes } from 'styled-components';\n\nexport const CardContainer = styled.div`\n  width: 6.5rem;\n`;\n\nconst flipAnimation = keyframes`\n  from {\n    transform: translateX(3rem);\n  }\n\n  to {\n    transform: translateX(0);\n  }\n`;\n\nexport const CardBase = styled.img`\n  position: relative;\n  width: 100%;\n  height: auto;\n  animation: ${flipAnimation} 0.5s ease-in-out;\n`;\n","import React from 'react';\nimport { CardContainer, CardBase } from './style';\n\ninterface Props {\n  rank: string;\n  suit: string;\n}\n\nconst Card: React.FC<Props> = ({ rank, suit }) => {\n  const rankCharacter = rank.charAt(0);\n  const suitCharacter = suit.charAt(0);\n\n  // need to add this special character as a filename called 'AD' will become hidden by ad blockers.\n  const specialChar = `${rankCharacter}${suitCharacter}` === 'AD' ? '_' : '';\n\n  return (\n    <CardContainer>\n      <CardBase\n        src={`assets/images/${\n          rankCharacter === '1' ? 'T' : rankCharacter\n        }${suitCharacter}${specialChar}.svg`}\n      />\n    </CardContainer>\n  );\n};\n\nexport default Card;\n","import styled from 'styled-components';\n\nexport default styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 14rem;\n`;\n","import styled from 'styled-components';\n\nexport default styled.div`\n  display: flex;\n  justify-content: center;\n\n  & > *:not(:first-child) {\n    margin-left: -4rem;\n  }\n`;\n","import styled from 'styled-components';\n\ninterface Props {\n  isBust: boolean;\n}\n\nexport default styled.div`\n  color: #fff;\n  background-color: ${(props: Props) => (props.isBust ? '#c0392b' : '#2c3e50')};\n  font-size: 1.2rem;\n  text-align: center;\n  border-radius: 6px;\n  margin: 1rem 1rem;\n  padding: 0.5rem 1.25rem;\n  flex: 0;\n`;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Card from '../Card';\nimport CombinedRootState from '../../types/CombinedRootState';\nimport SerializedPlayer from '../../types/SerializedPlayer';\nimport HandWrapper from './style';\nimport HandContainer from '../common/HandContainer';\nimport HandScore from '../common/HandScore';\n\ninterface Props {\n  activePlayer?: SerializedPlayer;\n}\n\nconst PlayerHand: React.FC<Props> = ({ activePlayer }) => {\n  const isBust = activePlayer.handValue > 21;\n\n  return (\n    <HandWrapper>\n      <HandContainer>\n        {activePlayer &&\n          activePlayer.hand.map(({ suit, rank }) => (\n            <Card suit={suit} rank={rank} key={`${rank}${suit}`} />\n          ))}\n      </HandContainer>\n      {activePlayer?.hand.length > 0 && (\n        <HandScore isBust={isBust}>\n          {isBust ? 'BUST' : activePlayer?.handValue}\n        </HandScore>\n      )}\n    </HandWrapper>\n  );\n};\n\nconst mapStateToProps = (state: CombinedRootState) => ({\n  activePlayer: state.player.activePlayer,\n});\n\nexport default connect(mapStateToProps, null)(PlayerHand);\n","import styled from 'styled-components';\n\nexport const HandControlWrapper = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  max-width: 35rem;\n  margin: 0 auto;\n`;\n\ninterface HandControlButtonProps {\n  disabled?: boolean;\n}\n\nexport const HandControlButton = styled.button`\n  cursor: pointer;\n  border: none;\n  color: white;\n  font-size: 1.2rem;\n  margin-top: 1rem;\n  padding: 1rem 1.5rem;\n  border-radius: 4px;\n  background-color: #e67e22;\n  text-transform: uppercase;\n  opacity: ${(props: HandControlButtonProps) => (props.disabled ? 0.5 : 1)};\n`;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { HandControlButton, HandControlWrapper } from './style';\nimport CombinedRootState from '../../types/CombinedRootState';\nimport SerializedPlayer from '../../types/SerializedPlayer';\nimport { hit, stand, double } from '../../actions';\nimport { PlayerStatus } from '../../types/PlayerStatus';\n\ninterface Props {\n  activePlayer?: SerializedPlayer | null;\n  hit: () => void;\n  stand: () => void;\n  double: () => void;\n}\n\nconst PlayerHandControls: React.FC<Props> = ({\n  activePlayer,\n  hit,\n  stand,\n  double,\n}) => {\n  const isPlayerActive = activePlayer.status === PlayerStatus.Active;\n  const isPlayerHoldingCards = activePlayer?.hand.length > 0;\n\n  return (\n    <HandControlWrapper>\n      {isPlayerActive && isPlayerHoldingCards && (\n        <>\n          <HandControlButton onClick={hit}>Hit</HandControlButton>\n          <HandControlButton onClick={stand}>Stand</HandControlButton>\n        </>\n      )}\n      {activePlayer.hand.length === 2 && isPlayerActive && (\n        <HandControlButton\n          disabled={activePlayer.stack - activePlayer.betSize < 0}\n          onClick={double}\n        >\n          Double\n        </HandControlButton>\n      )}\n    </HandControlWrapper>\n  );\n};\n\nconst mapStateToProps = (state: CombinedRootState) => ({\n  activePlayer: state.player.activePlayer,\n});\n\nexport default connect(mapStateToProps, { hit, stand, double })(\n  PlayerHandControls,\n);\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  height: 100%;\n\n  .hidden {\n    visibility: hidden;\n  }\n`;\n\nexport const PlayerArea = styled.div`\n  height: 20rem;\n`;\n\nexport const PotContainer = styled.div`\n  height: 9rem;\n`;\n","import styled from 'styled-components';\n\nexport default styled.div`\n  margin-top: 0.75rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 14.5rem;\n`;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Card from '../Card';\nimport CombinedRootState from '../../types/CombinedRootState';\nimport HandContainer from '../common/HandContainer';\nimport HandScore from '../common/HandScore';\nimport HandWrapper from './style';\nimport { SerializedHand } from '../../types/SerializedHand';\nimport SerializedPlayer from '../../types/SerializedPlayer';\nimport { PlayerStatus } from '../../types/PlayerStatus';\n\ninterface Props {\n  dealer?: { hand: SerializedHand; handValue: number };\n  players?: SerializedPlayer[];\n}\n\nconst Dealer: React.FC<Props> = ({ dealer, players }) => {\n  const checkForActivePlayer = (): boolean | undefined => {\n    return players?.some((player) => player.status === PlayerStatus.Active);\n  };\n\n  const isActivePlayer = checkForActivePlayer();\n\n  const isBust = dealer.handValue > 21;\n\n  return (\n    <HandWrapper>\n      <HandContainer className={dealer.hand.length === 0 ? 'hidden' : ''}>\n        {dealer &&\n          dealer.hand.map(({ suit, rank }, i) => {\n            if (i === 0 && isActivePlayer) {\n              return <Card suit=\"B\" rank=\"B\" key={`${rank}${suit}`} />;\n            }\n\n            return <Card suit={suit} rank={rank} key={`${rank}${suit}`} />;\n          })}\n      </HandContainer>\n      {dealer.hand.length > 0 && (\n        <HandScore isBust={isBust}>\n          {isBust ? 'BUST' : dealer.handValue}\n        </HandScore>\n      )}\n    </HandWrapper>\n  );\n};\n\nconst mapStateToProps = (state: CombinedRootState) => ({\n  dealer: state.game.dealer,\n  players: state.player.players,\n});\n\nexport default connect(mapStateToProps, null)(Dealer);\n","import styled, { keyframes } from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  img {\n    width: 4rem;\n    height: 4rem;\n  }\n\n  .take-chip {\n    position: fixed;\n    transform: translateY(-150vh);\n  }\n\n  .give-chip {\n    position: fixed;\n    transform: translateY(150vh);\n  }\n`;\n\nexport const ChipWrapper = styled.div`\n  text-align: center;\n  transition: all 4s;\n  z-index: 999;\n`;\n\nconst scaleAnimation = keyframes`\n  0% {\n    transform: scale(1);\n  }\n\n  50% {\n    transform: scale(1.5);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n`;\n\nexport const BetLabel = styled.p`\n  color: #fff;\n  border-radius: 4px;\n  font-size: 1.2rem;\n  padding: 0.75rem 1rem;\n  background-color: black;\n  text-transform: uppercase;\n  margin-bottom: 0.5rem;\n  animation: ${scaleAnimation} 0.75s ease-in-out;\n`;\n\nexport const WinLabel = styled(BetLabel)`\n  color: #2ecc71;\n`;\n\nexport const LoseLabel = styled(BetLabel)`\n  color: #e74c3c;\n`;\n\nexport const PushLabel = styled(BetLabel)`\n  color: #ecf0f1;\n`;\n\nexport const ChipImage = styled.div`\n  background-image: url(assets/images/chip-red.svg);\n`;\n","import React from 'react';\nimport {\n  Wrapper,\n  LoseLabel,\n  BetLabel,\n  WinLabel,\n  PushLabel,\n  ChipWrapper,\n} from './style';\nimport SerializedPlayer from '../../types/SerializedPlayer';\nimport GamePhase from '../../types/GamePhase';\nimport { SerializedHand } from '../../types/SerializedHand';\nimport HandOutcome from '../../types/HandOutcome';\n\ninterface Props {\n  gamePhase: GamePhase;\n  activePlayer: SerializedPlayer;\n  dealer: { hand: SerializedHand; handValue: number };\n  trayAmount: number;\n}\n\nconst Pot: React.FC<Props> = ({\n  activePlayer,\n  gamePhase,\n  dealer,\n  trayAmount,\n}) => {\n  let animation = '';\n  const renderLabel = () => {\n    if (\n      !activePlayer ||\n      activePlayer.handOutcome === HandOutcome.Undetermined\n    ) {\n      return <BetLabel>Bet: ${activePlayer?.betSize || trayAmount}</BetLabel>;\n    }\n\n    if (activePlayer.handOutcome === HandOutcome.Loser) {\n      animation = 'take-chip';\n      return <LoseLabel>Lose: ${activePlayer?.betSize}</LoseLabel>;\n    }\n\n    if (activePlayer.handOutcome === HandOutcome.Winner) {\n      animation = 'give-chip';\n      return <WinLabel>Win: ${activePlayer?.betSize}</WinLabel>;\n    }\n    animation = 'give-chip';\n    return <PushLabel>Push</PushLabel>;\n  };\n\n  return (\n    <Wrapper>\n      {renderLabel()}\n      <ChipWrapper className={animation}>\n        <img src=\"assets/images/chip-red.svg\" alt=\"Betting Chip\" />\n      </ChipWrapper>\n    </Wrapper>\n  );\n};\n\nexport default Pot;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PlayerHand from '../PlayerHand';\nimport PlayerHandControls from '../PlayerHandControls';\nimport CombinedRootState from '../../types/CombinedRootState';\nimport SerializedPlayer from '../../types/SerializedPlayer';\nimport { PlayerArea, Wrapper, PotContainer } from './style';\nimport DealerHand from '../DealerHand';\nimport Pot from '../Pot';\nimport GamePhase from '../../types/GamePhase';\nimport { SerializedHand } from '../../types/SerializedHand';\n\ninterface Props {\n  gamePhase: GamePhase;\n  activePlayer: SerializedPlayer | null;\n  dealer: { hand: SerializedHand; handValue: number };\n  trayAmount: number;\n}\n\nconst Table: React.FC<Props> = ({\n  activePlayer,\n  gamePhase,\n  dealer,\n  trayAmount,\n}) => {\n  return (\n    <Wrapper>\n      <DealerHand />\n      <PotContainer>\n        {(!!trayAmount || activePlayer?.betSize) && (\n          <Pot\n            activePlayer={activePlayer}\n            gamePhase={gamePhase}\n            dealer={dealer}\n            trayAmount={trayAmount}\n          />\n        )}\n      </PotContainer>\n      <PlayerArea>\n        <PlayerHand />\n        <PlayerHandControls />\n      </PlayerArea>\n    </Wrapper>\n  );\n};\n\nconst mapStateToProps = (state: CombinedRootState) => ({\n  activePlayer: state.player.activePlayer,\n  gamePhase: state.game.phase,\n  dealer: state.game.dealer,\n  trayAmount: state.game.trayAmount,\n});\n\nexport default connect(mapStateToProps, null)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport 'fontsource-lato';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport GameMenu from './components/GameMenu';\nimport ChipTray from './components/ChipTray';\nimport CombinedRootState from './types/CombinedRootState';\nimport Header from './components/Header';\nimport Table from './components/Table';\n\nconst GlobalStyle = createGlobalStyle`\n  *, *::before, *::after {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n  \n  html {\n    font-size: 62.5%;\n    font-family: \"Lato\";\n    text-rendering: optimizeLegibility;\n  }\n\n  body {\n    line-height: 1.7;\n    background-color: #000;\n  }\n\n  \n  @media only screen and (min-width: 405px) {\n    html {\n      font-size: 80%;\n    }\n  }\n`;\n\nconst AppWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100vh;\n  margin: 0 auto;\n  background-color: #186737;\n\n  @media only screen and (min-width: 405px) {\n    max-width: 45rem;\n    margin: 0 auto;\n  }\n`;\n\ninterface Props {\n  isGameMenuVisible: boolean;\n}\n\nconst App: React.FC<Props> = ({ isGameMenuVisible }) => {\n  return (\n    <AppWrapper>\n      <GlobalStyle />\n      <Header />\n      {isGameMenuVisible ? (\n        <GameMenu />\n      ) : (\n        <>\n          <Table />\n          <ChipTray />\n        </>\n      )}\n    </AppWrapper>\n  );\n};\n\nconst mapStateToProps = (state: CombinedRootState) => ({\n  isGameMenuVisible: state.game.isGameMenuVisible,\n});\n\nexport default connect(mapStateToProps)(App);\n","import GamePhase from '../types/GamePhase';\nimport {\n  GameAction,\n  SetPhaseAction,\n  SetMenuAction,\n  UpdateDealerAction,\n  setTrayAmount,\n} from '../types/GameAction';\nimport {\n  SET_GAME_PHASE,\n  SET_GAME_MENU_VISIBILITY,\n  UPDATE_DEALER_HAND,\n  SET_TRAY_AMOUNT,\n} from '../actions/types';\nimport GameState from '../types/GameState';\n\nconst initialState: GameState = {\n  phase: GamePhase.Menu,\n  isGameMenuVisible: true,\n  trayAmount: 0,\n  dealer: { hand: [], handValue: 0 },\n};\n\nexport default (state = initialState, action: GameAction): GameState => {\n  switch (action.type) {\n    case SET_GAME_PHASE:\n      return { ...state, phase: (action as SetPhaseAction).phase };\n    case SET_GAME_MENU_VISIBILITY:\n      return {\n        ...state,\n        isGameMenuVisible: (action as SetMenuAction).isGameMenuVisible,\n      };\n    case UPDATE_DEALER_HAND:\n      return {\n        ...state,\n        dealer: (action as UpdateDealerAction).dealer,\n      };\n    case SET_TRAY_AMOUNT:\n      return {\n        ...state,\n        trayAmount: (action as setTrayAmount).trayAmount,\n      };\n    default:\n      return state;\n  }\n};\n","import {\n  PlayerAction,\n  SetActivePlayerAction,\n  SetPlayerAction,\n} from '../types/PlayerAction';\nimport { UPDATE_PLAYER, SET_ACTIVE_PLAYER } from '../actions/types';\nimport PlayerState from '../types/PlayerState';\n\nconst initialState: PlayerState = {\n  activePlayer: null,\n  players: [],\n};\n\nexport default (state = initialState, action: PlayerAction): PlayerState => {\n  switch (action.type) {\n    case UPDATE_PLAYER:\n      return {\n        ...state,\n        players: [\n          ...state.players.filter(\n            (player) => player.name !== (action as SetPlayerAction).player.name,\n          ),\n          (action as SetPlayerAction).player,\n        ],\n      };\n    case SET_ACTIVE_PLAYER:\n      return {\n        ...state,\n        activePlayer: (action as SetActivePlayerAction).activePlayer,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport gameReducer from './gameReducer';\nimport playerReducer from './playerReducer';\n\nexport default combineReducers({ game: gameReducer, player: playerReducer });\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nexport const initialState = {};\nconst middleware = [thunk];\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware)),\n);\n\nexport default store;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}