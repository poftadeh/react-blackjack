{"version":3,"sources":["images/chip-red.svg","images/card-bg.jpg","images/chip-blue.svg","images/chip-green.svg","images/chip-purple.svg","images/chip-black.svg","images/stack.svg","images/menu.svg","images/2H.svg","images/3H.svg","images/4H.svg","images/5H.svg","images/6H.svg","images/7H.svg","images/8H.svg","images/9H.svg","images/TH.svg","images/JH.svg","images/QH.svg","images/KH.svg","images/AH.svg","images/2S.svg","images/3S.svg","images/4S.svg","images/5S.svg","images/6S.svg","images/7S.svg","images/8S.svg","images/9S.svg","images/TS.svg","images/JS.svg","images/QS.svg","images/KS.svg","images/AS.svg","images/2D.svg","images/3D.svg","images/4D.svg","images/5D.svg","images/6D.svg","images/7D.svg","images/8D.svg","images/9D.svg","images/TD.svg","images/JD.svg","images/QD.svg","images/KD.svg","images/AD.svg","images/2C.svg","images/3C.svg","images/4C.svg","images/5C.svg","images/6C.svg","images/7C.svg","images/8C.svg","images/9C.svg","images/TC.svg","images/JC.svg","images/QC.svg","images/KC.svg","images/AC.svg","images/BB.svg","images/gameover.jpg","components/GameMenu/style.ts","types/GamePhase.ts","types/PlayerStatus.ts","game/Card/index.ts","constants/index.ts","game/Deck/index.ts","game/Stack/index.ts","game/Hand/index.ts","types/HandOutcome.ts","game/Dealer/index.ts","actions/index.ts","game/Player/index.ts","reducers/gameReducer.ts","reducers/playerReducer.ts","reducers/index.ts","actions/types.ts","store/index.ts","game/index.ts","components/GameMenu/index.tsx","components/ChipTray/style.ts","components/ChipTray/index.tsx","components/Header/style.ts","components/Header/index.tsx","components/Card/style.ts","utils/CardImages.ts","components/Card/index.tsx","components/PlayerHand/style.ts","components/common/HandContainer.ts","components/HandScore/style.ts","components/HandScore/index.tsx","components/PlayerHand/index.tsx","components/PlayerHandControls/style.ts","components/PlayerHandControls/index.tsx","components/Table/style.ts","components/DealerHand/style.ts","components/DealerHand/index.tsx","components/Pot/style.ts","components/Pot/index.tsx","components/Table/index.tsx","components/GameOverScreen/style.ts","components/GameOverScreen/index.tsx","App.tsx","index.tsx"],"names":["module","exports","GamePhase","MenuWrapper","styled","div","CardBg","MenuButton","button","props","disabled","PlayerStatus","Card","rank","suit","this","SUITS","RANKS","Deck","cards","generateCards","shuffle","singleDeck","push","i","length","randomIndex","Math","floor","random","temp","pop","Stack","startingChips","chips","amount","Hand","value","isBlackJack","isBust","card","calculateHandValue","sortedHand","sort","a","getRank","total","reduce","acc","includes","Number","formattedCards","map","hand","HandOutcome","Dealer","status","Active","addCard","getIsBust","Bust","Stand","getValue","getIsBlackJack","getCards","getSuit","game","Player","name","betSize","handOutcome","stack","Undetermined","chipStackAmount","getChips","Error","removeChips","winAmount","addChips","bet","resetBetSize","outcome","getChipValue","handValue","getHandValue","getHandOutcome","initialState","phase","Menu","isGameMenuVisible","trayAmount","dealer","activePlayer","players","combineReducers","state","action","type","player","filter","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","wait","duration","Promise","resolve","setTimeout","Game","deck","gamePhase","firstPlayer","Betting","playerName","find","getName","drawNewHand","forEach","drawCard","PlayerHand","getStatus","isHoldingBlackjack","nextActivePlayer","serialize","stand","getHand","doubleDown","activePlayerIndex","findIndex","isInteger","dealStartingHands","playDealerHand","dispatch","getSerializedActivePlayer","getDealer","serializeHand","DealerHand","dispatchUpdates","Results","endRound","startNewRound","dealerHandValue","dealerHasBlackjack","playerHasBlackjack","playerHandValue","setHandOutcome","Loser","Push","handlePush","Winner","applyWinMultiplier","resetPlayer","localStorage","setItem","JSON","stringify","storedGame","getItem","parsedGame","parse","playerHand","createHandFromStorageData","setGameMenuVisibility","setActivePlayer","setGamePhase","update","getGamePhase","updateDealer","setTrayAmount","connect","isMenuVisible","startGame","saveGame","loadGame","useState","isNewGameSelected","setIsNewGameSelected","newGame","onClick","Wrapper","Tray","RedChip","BlueChip","GreenChip","PurpleChip","BlackChip","Chip","StackImage","StackContainer","StackDisplay","h3","ControlButton","ControlPanel","bettingPlayer","betAmount","setBetAmount","handleClick","previousAmount","isBettingPhase","className","StyledHeader","header","Title","h1","hide","MenuIcon","CardContainer","flipAnimation","keyframes","CardBase","img","TwoHearts","ThreeHearts","FourHearts","FiveHearts","SixHearts","SevenHearts","EightHearts","NineHearts","TenHearts","JackHearts","QueenHearts","KingHearts","AceHearts","TwoSpades","ThreeSpades","FourSpades","FiveSpades","SixSpades","SevenSpades","EightSpades","NineSpades","TenSpades","JackSpades","QueenSpades","KingSpades","AceSpades","TwoDiamonds","ThreeDiamonds","FourDiamonds","FiveDiamonds","SixDiamonds","SevenDiamonds","EightDiamonds","NineDiamonds","TenDiamonds","JackDiamonds","QueenDiamonds","KingDiamonds","AceDiamonds","TwoClubs","ThreeClubs","FourClubs","FiveClubs","SixClubs","SevenClubs","EightClubs","NineClubs","TenClubs","JackClubs","QueenClubs","KingClubs","AceClubs","BB","src","CardImages","color","HandScore","label","String","HandContainer","key","HandControlWrapper","HandControlButton","hit","hittingPlayer","standingPlayer","double","doublingPlayer","isPlayerActive","isPlayerHoldingCards","PlayerArea","PotContainer","ChipWrapper","scaleAnimation","BetLabel","p","WinLabel","LoseLabel","PushLabel","Pot","animation","alt","GameOverImage","Message","GlobalStyle","createGlobalStyle","AppWrapper","GameOverScreen","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yHAAAA,EAAOC,QAAU,IAA0B,sC,sBCA3CD,EAAOC,QAAU,IAA0B,qC,sBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,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","file":"static/js/main.dc0f325b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chip-red.e333320c.svg\";","module.exports = __webpack_public_path__ + \"static/media/card-bg.4aa625a0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/chip-blue.3dc44f25.svg\";","module.exports = __webpack_public_path__ + \"static/media/chip-green.337dccf7.svg\";","module.exports = __webpack_public_path__ + \"static/media/chip-purple.2beaa4c8.svg\";","module.exports = __webpack_public_path__ + \"static/media/chip-black.8dcd03ad.svg\";","module.exports = __webpack_public_path__ + \"static/media/stack.367a3d1e.svg\";","module.exports = __webpack_public_path__ + \"static/media/menu.9bd7f9a9.svg\";","module.exports = __webpack_public_path__ + \"static/media/2H.d652a695.svg\";","module.exports = __webpack_public_path__ + \"static/media/3H.6165c00b.svg\";","module.exports = __webpack_public_path__ + \"static/media/4H.b51a4e68.svg\";","module.exports = __webpack_public_path__ + \"static/media/5H.56b9b3f7.svg\";","module.exports = __webpack_public_path__ + \"static/media/6H.35497b17.svg\";","module.exports = __webpack_public_path__ + \"static/media/7H.dd713ffc.svg\";","module.exports = __webpack_public_path__ + \"static/media/8H.723c98aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/9H.488e511b.svg\";","module.exports = __webpack_public_path__ + \"static/media/TH.43902a80.svg\";","module.exports = __webpack_public_path__ + \"static/media/JH.b4d4fc9d.svg\";","module.exports = __webpack_public_path__ + \"static/media/QH.5d62ca8c.svg\";","module.exports = __webpack_public_path__ + \"static/media/KH.32edec30.svg\";","module.exports = __webpack_public_path__ + \"static/media/AH.c58e95d8.svg\";","module.exports = __webpack_public_path__ + \"static/media/2S.f0a81250.svg\";","module.exports = __webpack_public_path__ + \"static/media/3S.f598d4d7.svg\";","module.exports = __webpack_public_path__ + \"static/media/4S.867fdd4e.svg\";","module.exports = __webpack_public_path__ + \"static/media/5S.68238020.svg\";","module.exports = __webpack_public_path__ + \"static/media/6S.8535d227.svg\";","module.exports = __webpack_public_path__ + \"static/media/7S.6eee6c15.svg\";","module.exports = __webpack_public_path__ + \"static/media/8S.fc223dea.svg\";","module.exports = __webpack_public_path__ + \"static/media/9S.5d3ae2c8.svg\";","module.exports = __webpack_public_path__ + \"static/media/TS.ee9237ea.svg\";","module.exports = __webpack_public_path__ + \"static/media/JS.e6b6b57f.svg\";","module.exports = __webpack_public_path__ + \"static/media/QS.b5e0c401.svg\";","module.exports = __webpack_public_path__ + \"static/media/KS.eeb99581.svg\";","module.exports = __webpack_public_path__ + \"static/media/AS.968e03f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/2D.0afc1021.svg\";","module.exports = __webpack_public_path__ + \"static/media/3D.64bbdfc4.svg\";","module.exports = __webpack_public_path__ + \"static/media/4D.6337b3df.svg\";","module.exports = __webpack_public_path__ + \"static/media/5D.7cc53349.svg\";","module.exports = __webpack_public_path__ + \"static/media/6D.a8a16a8d.svg\";","module.exports = __webpack_public_path__ + \"static/media/7D.e5ce541e.svg\";","module.exports = __webpack_public_path__ + \"static/media/8D.4739c238.svg\";","module.exports = __webpack_public_path__ + \"static/media/9D.a9c159a4.svg\";","module.exports = __webpack_public_path__ + \"static/media/TD.99a4da65.svg\";","module.exports = __webpack_public_path__ + \"static/media/JD.eb76720a.svg\";","module.exports = __webpack_public_path__ + \"static/media/QD.7e526ed2.svg\";","module.exports = __webpack_public_path__ + \"static/media/KD.1ecae532.svg\";","module.exports = __webpack_public_path__ + \"static/media/AD.5562ba0b.svg\";","module.exports = __webpack_public_path__ + \"static/media/2C.0f86ea3a.svg\";","module.exports = __webpack_public_path__ + \"static/media/3C.ce12ac25.svg\";","module.exports = __webpack_public_path__ + \"static/media/4C.0c592f5b.svg\";","module.exports = __webpack_public_path__ + \"static/media/5C.4a9ddbb2.svg\";","module.exports = __webpack_public_path__ + \"static/media/6C.55e577e0.svg\";","module.exports = __webpack_public_path__ + \"static/media/7C.ad8c27d7.svg\";","module.exports = __webpack_public_path__ + \"static/media/8C.102e3557.svg\";","module.exports = __webpack_public_path__ + \"static/media/9C.cc04db36.svg\";","module.exports = __webpack_public_path__ + \"static/media/TC.db7966b2.svg\";","module.exports = __webpack_public_path__ + \"static/media/JC.856ca47d.svg\";","module.exports = __webpack_public_path__ + \"static/media/QC.6eda68d1.svg\";","module.exports = __webpack_public_path__ + \"static/media/KC.91e44b13.svg\";","module.exports = __webpack_public_path__ + \"static/media/AC.5a3d9709.svg\";","module.exports = __webpack_public_path__ + \"static/media/BB.4b19df64.svg\";","module.exports = __webpack_public_path__ + \"static/media/gameover.96a50d0b.jpg\";","import styled from 'styled-components';\nimport CardBg from '../../images/card-bg.jpg';\n\nexport const MenuWrapper = styled.div`\n  display: flex;\n  height: 100%;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 3rem;\n  background-image: linear-gradient(\n      to bottom,\n      rgba(33, 33, 33, 0.75),\n      rgba(33, 33, 33, 0.75)\n    ),\n    url(${CardBg});\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;\n  transition: all 1s;\n`;\n\nexport const MenuButton = styled.button`\n  text-shadow: 0 1px 0 #000;\n  color: #fff;\n  text-transform: uppercase;\n  letter-spacing: 2px;\n  background-color: transparent;\n  border: 3px solid transparent;\n  outline: none;\n  font-size: 2.5rem;\n  font-weight: 500;\n  padding: 1.5rem;\n  margin-bottom: 8rem;\n  transition: all 1s;\n  opacity: ${(props) => (props.disabled ? 0.5 : 1)};\n\n  @media (hover: hover) {\n    &:hover {\n      border: ${(props) =>\n        props.disabled ? '3px solid transparent' : '3px solid #fff'};\n    }\n  }\n`;\n\nexport const NewGameButton = styled(MenuButton)``;\n","enum GamePhase {\n  Menu = 'Menu',\n  Betting = 'Betting',\n  PlayerHand = 'PlayerHand',\n  DealerHand = 'DealerHand',\n  Results = 'Results',\n}\n\nexport default GamePhase;\n","// eslint-disable-next-line import/prefer-default-export\nexport enum PlayerStatus {\n  Active = 'Active',\n  Stand = 'Stand',\n  Bust = 'Bust',\n}\n","import { Suit } from '../../types/Suit';\nimport { Rank } from '../../types/Rank';\n\nexport default class Card {\n  private suit: Suit;\n\n  private rank: Rank;\n\n  constructor(rank: Rank, suit: Suit) {\n    this.suit = suit;\n    this.rank = rank;\n  }\n\n  /**\n   * Returns the suit of the card.\n   * @returns {Suit}\n   */\n  public getSuit(): Suit {\n    return this.suit;\n  }\n\n  /**\n   * Returns the rank of the card.\n   * @returns {Rank}\n   */\n  public getRank(): Rank {\n    return this.rank;\n  }\n\n  /**\n   * Returns the name of the card indicating the rank and suit.\n   * @returns {string}\n   */\n  public getName(): string {\n    return `${this.rank} of ${this.suit}`;\n  }\n}\n","import { Suit } from '../types/Suit';\nimport { Rank } from '../types/Rank';\n\nexport const SUITS: Suit[] = ['Hearts', 'Spades', 'Diamonds', 'Clubs'];\n\nexport const RANKS: Rank[] = [\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  '10',\n  'Jack',\n  'Queen',\n  'King',\n  'Ace',\n];\n\nexport const NUMBER_OF_DECKS = 8;\n\nexport const NUMBER_OF_CARDS_PER_DECK = 52;\n\nexport const STANDARD_WIN_MULTIPLIER = 2;\n\nexport const BLACKJACK_WIN_MULTIPLIER = 2.5;\n","import Card from '../Card';\nimport { SUITS, RANKS, NUMBER_OF_DECKS } from '../../constants';\n\nexport default class Deck {\n  private cards: Card[] = [];\n\n  constructor() {\n    this.generateCards();\n    this.shuffle();\n  }\n\n  /**\n   * Sets up the deck by generating the standard set of cards based on deck count.\n   */\n  private generateCards(): void {\n    const singleDeck: Card[] = [];\n\n    for (const suit of SUITS) {\n      for (const rank of RANKS) {\n        singleDeck.push(new Card(rank, suit));\n      }\n    }\n\n    for (let i = 0; i < NUMBER_OF_DECKS; i += 1) {\n      this.cards = [...this.cards, ...singleDeck];\n    }\n  }\n\n  /**\n   * Shuffles the deck.\n   * @returns {void}\n   */\n  public shuffle(): void {\n    const {\n      cards,\n      cards: { length },\n    } = this;\n\n    for (let i = 0; i < length; i += 1) {\n      const randomIndex = Math.floor(Math.random() * length);\n      const temp = cards[randomIndex];\n      cards[randomIndex] = cards[i];\n      cards[i] = temp;\n    }\n  }\n\n  /**\n   * Returns the card array from the deck.\n   * @returns {Card[]}\n   */\n  public getCards(): Card[] {\n    return this.cards;\n  }\n\n  /**\n   * Draws a card from the deck.\n   */\n  public drawCard(): Card {\n    if (this.cards.length === 0) {\n      this.generateCards();\n    }\n\n    return this.cards.pop() as Card;\n  }\n}\n","export default class Stack {\n  private chips = 0;\n\n  constructor(startingChips: number) {\n    this.chips = startingChips;\n  }\n\n  /**\n   * Adds chips to the stack.\n   * @param amount\n   */\n  public addChips(amount: number): void {\n    this.chips += amount;\n  }\n\n  /**\n   * Removes chips from the stack.\n   * @param amount\n   */\n  public removeChips(amount: number): void {\n    if (amount >= this.chips) {\n      this.chips = 0;\n    } else {\n      this.chips -= amount;\n    }\n  }\n\n  /**\n   * Returns the stack amount\n   */\n  public getChips(): number {\n    return this.chips;\n  }\n}\n","import Card from '../Card';\nimport { Rank } from '../../types/Rank';\nimport { Suit } from '../../types/Suit';\n\ninterface StoredHand {\n  cards: { suit: string; rank: string }[];\n  isBlackJack: boolean;\n  isBust: boolean;\n  value: number;\n}\nexport default class Hand {\n  private cards: Card[] = [];\n\n  private value = 0;\n\n  private isBlackJack = false;\n\n  private isBust = false;\n\n  /**\n   * Returns the cards contained in the hand.\n   * @returns {Card[]}\n   */\n  public getCards(): Card[] {\n    return this.cards;\n  }\n\n  public static createHandFromStorageData({\n    cards,\n    isBlackJack,\n    isBust,\n    value,\n  }: StoredHand): Hand {\n    const formattedCards = cards.map(\n      (card: { suit: string; rank: string }) =>\n        new Card(card.rank as Rank, card.suit as Suit),\n    );\n\n    const hand = new Hand();\n    hand.cards = formattedCards;\n    hand.isBlackJack = isBlackJack;\n    hand.isBust = isBust;\n    hand.value = value;\n\n    return hand;\n  }\n\n  /**\n   * Returns the value of the hand\n   * @returns {number}\n   */\n  public getValue(): number {\n    return this.value;\n  }\n\n  /**\n   * Returns whether or not the hand is a blackjack\n   * @returns {number}\n   */\n  public getIsBlackJack(): boolean {\n    return this.isBlackJack;\n  }\n\n  /**\n   * Returns whether or not the hand is bust.\n   * @returns {number}\n   */\n  public getIsBust(): boolean {\n    return this.isBust;\n  }\n\n  /**\n   * Adds a Card object to the hand.\n   * @param card\n   */\n  public addCard(card: Card): void {\n    this.cards.push(card);\n    this.calculateHandValue();\n  }\n\n  /**\n   * Calculates the total value of the hand.\n   */\n  private calculateHandValue(): void {\n    // simplify calculations by moving Aces to the back of the hand.\n    const sortedHand: Card[] = [...this.cards].sort((a) =>\n      a.getRank() === 'Ace' ? 1 : -1,\n    );\n\n    const total: number = sortedHand.reduce((acc, card) => {\n      const rank = card.getRank();\n\n      if (rank === 'Ace') {\n        return acc >= 11 ? acc + 1 : acc + 11;\n      }\n      if (['Jack', 'Queen', 'King'].includes(rank)) {\n        return acc + 10;\n      }\n      return acc + Number(rank);\n    }, 0);\n\n    if (total >= 22) {\n      this.isBust = true;\n    }\n\n    if (total === 21 && sortedHand.length === 2) {\n      this.isBlackJack = true;\n    }\n\n    this.value = total;\n  }\n}\n","enum HandOutcome {\n  Undetermined = 'Undetermined',\n  Loser = 'Loser',\n  Winner = 'Winner',\n  Push = 'Push',\n}\n\nexport default HandOutcome;\n","import Hand from '../Hand';\nimport { PlayerStatus } from '../../types/PlayerStatus';\nimport Card from '../Card';\nimport { SerializedHand } from '../../types/SerializedHand';\n\nexport default class Dealer {\n  protected hand: Hand;\n\n  protected status: PlayerStatus;\n\n  constructor(hand?: Hand, status?: PlayerStatus) {\n    this.hand = hand ?? new Hand();\n    this.status = status ?? PlayerStatus.Active;\n  }\n\n  /**\n   * Adds a card to the hand.\n   * @param card\n   */\n  public addCard(card: Card): void {\n    this.hand.addCard(card);\n    if (this.hand.getIsBust()) {\n      this.status = PlayerStatus.Bust;\n    }\n  }\n\n  /**\n   * Puts the dealer in a 'stand' state.\n   */\n  public stand(): void {\n    this.status = PlayerStatus.Stand;\n  }\n\n  /**\n   * Returns the dealer's hand.\n   */\n  public getHand(): Hand {\n    return this.hand;\n  }\n\n  /**\n   * Returns the dealer's hand value.\n   */\n  public getHandValue(): number {\n    return this.hand.getValue();\n  }\n\n  /**\n   * Returns a boolean indicating if the dealer's hand is busted.\n   */\n  public isBust(): boolean {\n    return this.hand.getIsBust();\n  }\n\n  /**\n   * Returns whether or not the current hand is a BlackJack.\n   */\n  public isHoldingBlackjack(): boolean {\n    return this.hand.getIsBlackJack();\n  }\n\n  /**\n   * Returns dealer's status\n   */\n  public getStatus(): PlayerStatus {\n    return this.status;\n  }\n\n  /**\n   * Discards current hand and replaces it with a new hand.\n   */\n  public drawNewHand(): void {\n    this.hand = new Hand();\n  }\n\n  /**\n   * Returns the serialized form of the hand for storage.\n   */\n  public serializeHand(): SerializedHand {\n    return this.hand\n      .getCards()\n      .map((card) => ({ suit: card.getSuit(), rank: card.getRank() }));\n  }\n}\n","import GamePhase from '../types/GamePhase';\nimport {\n  SET_GAME_PHASE,\n  SET_GAME_MENU_VISIBILITY,\n  UPDATE_PLAYER,\n  SET_ACTIVE_PLAYER,\n  UPDATE_DEALER_HAND,\n  SET_TRAY_AMOUNT,\n} from './types';\nimport Game, { CreatedPlayer } from '../game';\nimport { AppThunk } from '../types/AppThunk';\nimport { GameAction } from '../types/GameAction';\nimport { PlayerAction } from '../types/PlayerAction';\nimport SerializedPlayer from '../types/SerializedPlayer';\n\nlet game: Game;\n\nexport const startGame = (players: CreatedPlayer[]): AppThunk => (dispatch) => {\n  game = new Game(players);\n  dispatch(setGamePhase(GamePhase.Betting));\n  dispatch(setGameMenuVisibility(false));\n  dispatch(setActivePlayer());\n  dispatch(updateDealer());\n};\n\nexport const setGameMenuVisibility = (\n  isGameMenuVisible: boolean,\n): GameAction => ({\n  type: SET_GAME_MENU_VISIBILITY,\n  isGameMenuVisible,\n});\n\nexport const setActivePlayer = (): PlayerAction => ({\n  type: SET_ACTIVE_PLAYER,\n  activePlayer: game.getSerializedActivePlayer(),\n});\n\nexport const setGamePhase = (phase: GamePhase): GameAction => ({\n  type: SET_GAME_PHASE,\n  phase,\n});\n\nexport const update = (player: SerializedPlayer): AppThunk => (dispatch) => {\n  dispatch({\n    type: UPDATE_PLAYER,\n    player,\n  });\n  dispatch(setActivePlayer());\n  if (game.getGamePhase() !== GamePhase.DealerHand) {\n    dispatch(updateDealer());\n  }\n  dispatch(setGamePhase(game.getGamePhase()));\n\n  if (game.getGamePhase() === GamePhase.Results) {\n    setTimeout(() => dispatch(startNewRound()), 3000);\n  }\n};\n\nexport const bet = (amount: number): AppThunk => (dispatch) => {\n  const bettingPlayer = game.bet(amount);\n  dispatch(update(bettingPlayer));\n};\n\nexport const hit = (): AppThunk => (dispatch) => {\n  const hittingPlayer = game.hit();\n  dispatch(update(hittingPlayer));\n};\n\nexport const stand = (): AppThunk => (dispatch) => {\n  const standingPlayer = game.stand();\n  dispatch(update(standingPlayer));\n};\n\nexport const double = (): AppThunk => (dispatch) => {\n  const doublingPlayer = game.double();\n  dispatch(update(doublingPlayer));\n};\n\nexport const updateDealer = (): AppThunk => (dispatch) => {\n  const hand = game.getDealer().serializeHand();\n  const handValue = game.getDealer().getHandValue();\n\n  dispatch({\n    type: UPDATE_DEALER_HAND,\n    dealer: { hand, handValue },\n  });\n};\n\nexport const playDealerHand = (): AppThunk => (dispatch) => {\n  game.playDealerHand();\n  dispatch(updateDealer());\n  dispatch({\n    type: UPDATE_PLAYER,\n    player: game.getSerializedActivePlayer(),\n  });\n};\n\nexport const setTrayAmount = (trayAmount: number): GameAction => ({\n  type: SET_TRAY_AMOUNT,\n  trayAmount,\n});\n\nexport const startNewRound = (): AppThunk => (dispatch) => {\n  game.startNewRound();\n  dispatch(setTrayAmount(0));\n  dispatch(update(game.getSerializedActivePlayer()));\n};\n\nexport const saveGame = (): AppThunk => (dispatch) => {\n  if (!game) {\n    throw new Error('There is no game instance to save the game state.');\n  }\n\n  game.saveGame();\n};\n\nexport const loadGame = (): AppThunk => (dispatch) => {\n  if (!game) {\n    game = new Game([{ name: 'foo', startingChips: 1000 }]);\n  }\n\n  game.loadGame();\n  dispatch(update(game.getSerializedActivePlayer()));\n};\n","import Stack from '../Stack';\nimport {\n  STANDARD_WIN_MULTIPLIER,\n  BLACKJACK_WIN_MULTIPLIER,\n} from '../../constants';\nimport Dealer from '../Dealer';\nimport { PlayerStatus } from '../../types/PlayerStatus';\nimport Card from '../Card';\nimport SerializedPlayer from '../../types/SerializedPlayer';\nimport HandOutcome from '../../types/HandOutcome';\nimport Hand from '../Hand';\n\nexport default class Player extends Dealer {\n  private name: string;\n\n  private stack: Stack;\n\n  private betSize: number;\n\n  private handOutcome: HandOutcome;\n\n  constructor(\n    name: string,\n    startingChips: number,\n    betSize?: number,\n    handOutcome?: HandOutcome,\n    hand?: Hand,\n    status?: PlayerStatus,\n  ) {\n    super(hand, status);\n    this.name = name;\n    this.stack = new Stack(startingChips);\n    this.betSize = betSize ?? 0;\n    this.handOutcome = handOutcome ?? HandOutcome.Undetermined;\n  }\n\n  /**\n   * Returns the player's name.\n   */\n  public getName(): string {\n    return this.name;\n  }\n\n  /**\n   * Returns the player's chip stack.\n   */\n  public getStack(): Stack {\n    return this.stack;\n  }\n\n  /**\n   * Places a bet amount for the player.\n   * @param amount the number of chips to wager.\n   */\n  public bet(amount: number): void {\n    const chipStackAmount = this.stack.getChips();\n    if (amount > chipStackAmount) {\n      throw new Error(\n        `Wager of ${amount} exceeds the $${chipStackAmount} chip stack.`,\n      );\n    }\n\n    this.stack.removeChips(amount);\n    this.betSize += amount;\n  }\n\n  /**\n   * Applies the win multiplier to the player's wager amount and adds it to the chip stack.\n   */\n  public applyWinMultiplier(): void {\n    if (this.status === PlayerStatus.Bust) {\n      throw new Error('Win condition called for busted player.');\n    }\n\n    const winAmount = this.hand.getIsBlackJack()\n      ? this.betSize * BLACKJACK_WIN_MULTIPLIER\n      : this.betSize * STANDARD_WIN_MULTIPLIER;\n\n    this.stack.addChips(winAmount);\n  }\n\n  /**\n   * Handles draw situations by returning bet chips to stack.\n   */\n  public handlePush(): void {\n    this.stack.addChips(this.betSize);\n  }\n\n  /**\n   * Returns the chip stack value for the player.\n   */\n  public getChipValue(): number {\n    return this.stack.getChips();\n  }\n\n  /**\n   * Returns the player's bet size.\n   */\n  public getBetSize(): number {\n    return this.betSize;\n  }\n\n  /**\n   * Performs a double down action for the player.\n   * @param card card to be added to hand.\n   */\n  public doubleDown(card: Card): void {\n    this.addCard(card);\n    this.bet(this.betSize);\n\n    if (!this.isBust()) {\n      this.status = PlayerStatus.Stand;\n    }\n  }\n\n  /**\n   * Resets bet size for a new round.\n   */\n  public resetBetSize(): void {\n    this.betSize = 0;\n  }\n\n  /**\n   * Resets the player's hand, chips, and hand outcome.\n   */\n  public resetPlayer(): void {\n    super.drawNewHand();\n    this.resetBetSize();\n    this.handOutcome = HandOutcome.Undetermined;\n    this.status = PlayerStatus.Active;\n  }\n\n  /**\n   * Sets the outcome of the hand.\n   * @param outcome\n   */\n  public setHandOutcome(outcome: HandOutcome): void {\n    this.handOutcome = outcome;\n  }\n\n  /**\n   * Sets the outcome of the hand.\n   * @param outcome\n   */\n  public getHandOutcome(): HandOutcome {\n    return this.handOutcome;\n  }\n\n  /**\n   * Returns the serialized form of the player for storage.\n   */\n  public serialize(): SerializedPlayer {\n    return {\n      name: this.name,\n      hand: this.hand\n        .getCards()\n        .map((card) => ({ suit: card.getSuit(), rank: card.getRank() })),\n      status: this.status,\n      stack: this.getChipValue(),\n      betSize: this.betSize,\n      handValue: this.getHandValue(),\n      handOutcome: this.getHandOutcome(),\n    };\n  }\n}\n","import GamePhase from '../types/GamePhase';\nimport {\n  GameAction,\n  SetPhaseAction,\n  SetMenuAction,\n  UpdateDealerAction,\n  setTrayAmount,\n} from '../types/GameAction';\nimport {\n  SET_GAME_PHASE,\n  SET_GAME_MENU_VISIBILITY,\n  UPDATE_DEALER_HAND,\n  SET_TRAY_AMOUNT,\n} from '../actions/types';\nimport GameState from '../types/GameState';\n\nconst initialState: GameState = {\n  phase: GamePhase.Menu,\n  isGameMenuVisible: true,\n  trayAmount: 0,\n  dealer: { hand: [], handValue: 0 },\n};\n\nexport default (state = initialState, action: GameAction): GameState => {\n  switch (action.type) {\n    case SET_GAME_PHASE:\n      return { ...state, phase: (action as SetPhaseAction).phase };\n    case SET_GAME_MENU_VISIBILITY:\n      return {\n        ...state,\n        isGameMenuVisible: (action as SetMenuAction).isGameMenuVisible,\n      };\n    case UPDATE_DEALER_HAND:\n      return {\n        ...state,\n        dealer: (action as UpdateDealerAction).dealer,\n      };\n    case SET_TRAY_AMOUNT:\n      return {\n        ...state,\n        trayAmount: (action as setTrayAmount).trayAmount,\n      };\n    default:\n      return state;\n  }\n};\n","import {\n  PlayerAction,\n  SetActivePlayerAction,\n  SetPlayerAction,\n} from '../types/PlayerAction';\nimport { UPDATE_PLAYER, SET_ACTIVE_PLAYER } from '../actions/types';\nimport PlayerState from '../types/PlayerState';\n\nconst initialState: PlayerState = {\n  activePlayer: null,\n  players: [],\n};\n\nexport default (state = initialState, action: PlayerAction): PlayerState => {\n  switch (action.type) {\n    case UPDATE_PLAYER:\n      return {\n        ...state,\n        players: [\n          ...state.players.filter(\n            (player) => player.name !== (action as SetPlayerAction).player.name,\n          ),\n          (action as SetPlayerAction).player,\n        ],\n      };\n    case SET_ACTIVE_PLAYER:\n      return {\n        ...state,\n        activePlayer: (action as SetActivePlayerAction).activePlayer,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport gameReducer from './gameReducer';\nimport playerReducer from './playerReducer';\n\nexport default combineReducers({ game: gameReducer, player: playerReducer });\n","export const SET_DECK = 'SET_DECK';\nexport const UPDATE_PLAYER = 'UPDATE_PLAYER';\nexport const ADD_PLAYER = 'ADD_PLAYER';\nexport const SET_GAME_PHASE = 'SET_GAME_PHASE';\nexport const SET_GAME_MENU_VISIBILITY = 'SET_GAME_MENU_VISIBILITY';\nexport const SET_ACTIVE_PLAYER = 'SET_ACTIVE_PLAYER';\nexport const UPDATE_DEALER_HAND = 'UPDATE_DEALER_HAND';\nexport const SET_TRAY_AMOUNT = 'SET_TRAY_AMOUNT';\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nexport const initialState = {};\nconst middleware = [thunk];\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware)),\n);\n\nexport default store;\n","import Deck from './Deck';\nimport Player from './Player';\nimport Dealer from './Dealer';\nimport { PlayerStatus } from '../types/PlayerStatus';\nimport GamePhase from '../types/GamePhase';\nimport SerializedPlayer from '../types/SerializedPlayer';\nimport HandOutcome from '../types/HandOutcome';\nimport Hand from './Hand';\nimport store from '../store';\nimport {\n  UPDATE_DEALER_HAND,\n  UPDATE_PLAYER,\n  SET_ACTIVE_PLAYER,\n  SET_GAME_PHASE,\n  SET_TRAY_AMOUNT,\n} from '../actions/types';\n\nexport interface CreatedPlayer {\n  name: string;\n  startingChips: number;\n}\n\nconst STARTING_HAND_SIZE = 2;\n\nconst wait = (duration: number) => {\n  return new Promise((resolve) => setTimeout(resolve, duration));\n};\n\nexport default class Game {\n  private deck: Deck;\n\n  private players: Player[];\n\n  private dealer: Dealer;\n\n  private activePlayer: Player;\n\n  private gamePhase: GamePhase;\n\n  constructor(players: CreatedPlayer[]) {\n    this.deck = new Deck();\n    this.dealer = new Dealer();\n    this.players = players.map(\n      ({ name, startingChips }) => new Player(name, startingChips),\n    );\n    const [firstPlayer] = this.players;\n    this.activePlayer = firstPlayer;\n    this.gamePhase = GamePhase.Betting;\n  }\n\n  /**\n   * Returns a player searched for by name.\n   * @param playerName string representing the player's name to find.\n   * @returns {Player}\n   */\n  public findPlayerByName(playerName: string): Player {\n    const player = this.players.find(\n      (player) => player.getName() === playerName,\n    );\n\n    if (!player) {\n      throw new Error(`Could not find player ${playerName}`);\n    }\n\n    return player;\n  }\n\n  /**\n   * Returns the dealer object.\n   */\n  public getDealer(): Dealer {\n    return this.dealer;\n  }\n\n  /**\n   * Returns the player Array.\n   */\n  public getPlayers(): Player[] {\n    return this.players;\n  }\n\n  /**\n   * Returns the current active player.\n   */\n  public getActivePlayerName(): string {\n    return this.activePlayer.getName();\n  }\n\n  /**\n   * Deals the starting hands for the dealer and all players.\n   */\n  public dealStartingHands(): void {\n    this.dealer.drawNewHand();\n    this.players.forEach((player) => player.drawNewHand());\n\n    for (let i = 0; i < STARTING_HAND_SIZE; i += 1) {\n      this.players.forEach((player) => player.addCard(this.deck.drawCard()));\n      this.dealer.addCard(this.deck.drawCard());\n    }\n    this.gamePhase = GamePhase.PlayerHand;\n  }\n\n  /**\n   * Deals a card to an active player.\n   * @param playerName string representing the player's name\n   */\n  public hit(): SerializedPlayer {\n    const player = this.activePlayer;\n\n    if (player.getStatus() !== PlayerStatus.Active) {\n      throw new Error('Cannot deal card to an inactive player.');\n    }\n\n    const card = this.deck.drawCard();\n    player.addCard(card);\n\n    if (player.isBust() || player.isHoldingBlackjack()) {\n      this.nextActivePlayer();\n    }\n    return player.serialize();\n  }\n\n  /**\n   * Sets a player's hand status to stand.\n   * @param playerName the player's name\n   */\n  public stand(): SerializedPlayer {\n    const player = this.activePlayer;\n\n    if (player.getStatus() !== PlayerStatus.Active) {\n      throw new Error('Player cannot stand when not in an active state');\n    }\n\n    player.stand();\n    this.nextActivePlayer();\n    return player.serialize();\n  }\n\n  /**\n   * Sets a player's hand status to stand.\n   * @param playerName the player's name\n   */\n  public double(): SerializedPlayer {\n    const player = this.activePlayer;\n\n    if (player.getStatus() !== PlayerStatus.Active) {\n      throw new Error('Player cannot double when not in an active state');\n    }\n\n    if (player.getHand().getCards().length !== 2) {\n      throw new Error('Player can only double with two cards in hand.');\n    }\n\n    const card = this.deck.drawCard();\n    player.doubleDown(card);\n    this.nextActivePlayer();\n    return player.serialize();\n  }\n\n  /**\n   * Gives a turn to the next active player.\n   */\n  public nextActivePlayer(): void {\n    const activePlayerIndex = this.players.findIndex(\n      (player) => player.getName() === this.activePlayer.getName(),\n    );\n\n    if (!Number.isInteger(activePlayerIndex)) {\n      throw new Error('Failed to find the index of the active player');\n    }\n\n    this.activePlayer = this.players[\n      (activePlayerIndex + 1) % this.players.length\n    ];\n\n    if (activePlayerIndex === this.players.length - 1) {\n      if (this.gamePhase === GamePhase.Betting) {\n        this.dealStartingHands();\n      } else {\n        this.playDealerHand();\n      }\n    }\n  }\n\n  /**\n   * Places a bet for the active player\n   * @param playerName\n   * @param amount\n   */\n\n  public bet(amount: number): SerializedPlayer {\n    const player = this.activePlayer;\n    player.bet(amount);\n    this.nextActivePlayer();\n    return player.serialize();\n  }\n\n  private dispatchUpdates(): void {\n    store.dispatch({\n      type: UPDATE_PLAYER,\n      player: this.activePlayer,\n    });\n\n    store.dispatch({\n      type: SET_ACTIVE_PLAYER,\n      activePlayer: this.getSerializedActivePlayer(),\n    });\n\n    store.dispatch({\n      type: SET_GAME_PHASE,\n      phase: this.gamePhase,\n    });\n\n    const hand = this.getDealer().serializeHand();\n    const handValue = this.getDealer().getHandValue();\n    store.dispatch({\n      type: UPDATE_DEALER_HAND,\n      dealer: { hand, handValue },\n    });\n  }\n\n  /**\n   * Plays out the dealer's hand. Stands on soft 17.\n   */\n  public async playDealerHand(): Promise<void> {\n    this.gamePhase = GamePhase.DealerHand;\n    await wait(this.dealer.getHand().getCards().length === 2 ? 600 : 1000);\n\n    if (this.dealer.getHandValue() < 17) {\n      this.dealer.addCard(this.deck.drawCard());\n      this.dispatchUpdates();\n      this.playDealerHand();\n      return;\n    }\n\n    if (!this.dealer.isBust()) {\n      this.dealer.stand();\n    }\n\n    this.gamePhase = GamePhase.Results;\n    this.endRound();\n\n    this.dispatchUpdates();\n\n    await wait(3000);\n    this.startNewRound();\n    store.dispatch({\n      type: SET_TRAY_AMOUNT,\n      trayAmount: 0,\n    });\n\n    this.dispatchUpdates();\n  }\n\n  /**\n   * Handles the outcome at the end of the hand.\n   */\n  public endRound(): void {\n    const dealerHandValue = this.dealer.getHandValue();\n    const dealerHasBlackjack = this.dealer.isHoldingBlackjack();\n\n    this.players.forEach((player) => {\n      const playerHasBlackjack = player.isHoldingBlackjack();\n      const playerHandValue = player.getHandValue();\n\n      if (\n        player.isBust() ||\n        (!this.dealer.isBust() && dealerHandValue > playerHandValue) ||\n        (dealerHasBlackjack && !playerHasBlackjack)\n      ) {\n        player.setHandOutcome(HandOutcome.Loser);\n        return;\n      }\n\n      if (playerHandValue === dealerHandValue) {\n        player.setHandOutcome(HandOutcome.Push);\n        player.handlePush();\n      }\n\n      if (this.dealer.isBust() || playerHandValue > dealerHandValue) {\n        player.setHandOutcome(HandOutcome.Winner);\n        player.applyWinMultiplier();\n      }\n    });\n  }\n\n  /**\n   * Serializes the current active player.\n   */\n  public getSerializedActivePlayer(): SerializedPlayer {\n    const activePlayer = this.players.find(\n      (player) => player.getName() === this.activePlayer.getName(),\n    );\n\n    if (!activePlayer) {\n      throw new Error('Could not retrieve active player');\n    }\n\n    return activePlayer.serialize();\n  }\n\n  /**\n   * Returns the current game phase.\n   */\n  public getGamePhase(): GamePhase {\n    return this.gamePhase;\n  }\n\n  /**\n   * Resets card/bet state and starts a new round.\n   */\n  public startNewRound(): void {\n    this.dealer.drawNewHand();\n    this.players.forEach((player) => {\n      player.resetPlayer();\n    });\n\n    this.gamePhase = GamePhase.Betting;\n  }\n\n  public saveGame(): void {\n    localStorage.setItem('game', JSON.stringify(this));\n  }\n\n  public loadGame(): void {\n    const storedGame = localStorage.getItem('game');\n\n    if (!storedGame) {\n      throw new Error('Could not find game data to load');\n    }\n\n    const parsedGame = JSON.parse(storedGame);\n\n    this.players = [];\n    this.deck = new Deck();\n    parsedGame.players.forEach((player) => {\n      const playerHand: Hand = Hand.createHandFromStorageData(player.hand);\n      this.players = [\n        ...this.players,\n        new Player(\n          player.name,\n          player.stack.chips,\n          player.betSize,\n          player.handOutcome,\n          playerHand,\n          player.status,\n        ),\n      ];\n    });\n    this.dealer = new Dealer(\n      Hand.createHandFromStorageData(parsedGame.dealer.hand),\n      parsedGame.dealer.status,\n    );\n\n    const activePlayer = this.players.find(\n      (player) => player.getName() === parsedGame.activePlayer.name,\n    );\n\n    if (!activePlayer)\n      throw new Error('Could not find active player in stored data');\n\n    this.activePlayer = activePlayer;\n    this.gamePhase = parsedGame.gamePhase;\n  }\n}\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { MenuWrapper, MenuButton } from './style';\nimport {\n  startGame,\n  saveGame,\n  loadGame,\n  setGameMenuVisibility,\n} from '../../actions';\nimport { CreatedPlayer } from '../../game';\nimport { GameAction } from '../../types/GameAction';\nimport SerializedPlayer from '../../types/SerializedPlayer';\nimport CombinedRootState from '../../types/CombinedRootState';\n\ninterface Props {\n  startGame: (players: CreatedPlayer[]) => void;\n  saveGame: () => void;\n  loadGame: () => void;\n  isMenuVisible: boolean;\n  setGameMenuVisibility: (isGameMenuVisible: boolean) => GameAction;\n  activePlayer: SerializedPlayer | null;\n}\n\nconst GameMenu: React.FC<Props> = ({\n  startGame,\n  saveGame,\n  loadGame,\n  setGameMenuVisibility,\n  isMenuVisible,\n  activePlayer,\n}) => {\n  const [isNewGameSelected, setIsNewGameSelected] = useState(false);\n\n  const newGame = (startingChips) => {\n    startGame([{ name: 'PlayerOne', startingChips }]);\n  };\n\n  return (\n    <MenuWrapper>\n      {!isNewGameSelected ? (\n        <>\n          <MenuButton onClick={() => setIsNewGameSelected(true)}>\n            New Game\n          </MenuButton>\n          <MenuButton\n            disabled={!activePlayer}\n            onClick={() => {\n              saveGame();\n              setGameMenuVisibility(!isMenuVisible);\n            }}\n          >\n            Save Game\n          </MenuButton>\n          <MenuButton\n            disabled={!localStorage.getItem('game')}\n            onClick={() => {\n              loadGame();\n              setGameMenuVisibility(!isMenuVisible);\n            }}\n          >\n            Load Game\n          </MenuButton>\n        </>\n      ) : (\n        <>\n          <MenuButton onClick={() => newGame(10000)}>\n            Novice ($10000)\n          </MenuButton>\n          <MenuButton onClick={() => newGame(5000)}>Normal ($5000)</MenuButton>\n          <MenuButton onClick={() => newGame(1000)}>Expert ($1000)</MenuButton>\n        </>\n      )}\n    </MenuWrapper>\n  );\n};\n\nconst mapStateToProps = (state: CombinedRootState) => ({\n  isMenuVisible: state.game.isGameMenuVisible,\n  activePlayer: state.player.activePlayer,\n});\n\nexport default connect(mapStateToProps, {\n  startGame,\n  saveGame,\n  loadGame,\n  setGameMenuVisibility,\n})(GameMenu);\n","import styled from 'styled-components';\nimport RedChip from '../../images/chip-red.svg';\nimport BlueChip from '../../images/chip-blue.svg';\nimport GreenChip from '../../images/chip-green.svg';\nimport PurpleChip from '../../images/chip-purple.svg';\nimport BlackChip from '../../images/chip-black.svg';\nimport Stack from '../../images/stack.svg';\n\nexport const Wrapper = styled.div`\n  width: 100%;\n`;\n\nexport const Tray = styled.div`\n  padding: 0 0 1.5rem 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #2c3e50;\n\n  .chips {\n    display: flex;\n    justify-content: space-around;\n    width: 30rem;\n  }\n\n  .chip-red {\n    background-image: url(${RedChip});\n  }\n  .chip-blue {\n    background-image: url(${BlueChip});\n  }\n  .chip-green {\n    background-image: url(${GreenChip});\n  }\n  .chip-purple {\n    background-image: url(${PurpleChip});\n  }\n  .chip-black {\n    background-image: url(${BlackChip});\n  }\n`;\n\nexport const Chip = styled.button`\n  border: none;\n  color: #fff;\n  width: 5rem;\n  height: 5rem;\n  border-radius: 50%;\n  background-color: transparent;\n  font-weight: 500;\n  text-align: center;\n  cursor: pointer;\n  background-size: cover;\n  transition: all 0.5s;\n  backface-visibility: hidden;\n\n  @media (hover: hover) {\n    &:hover {\n      transform: scale(1.2);\n    }\n  }\n`;\n\nexport const StackImage = styled.div`\n  background-image: url(${Stack});\n  background-repeat: no-repeat;\n  background-size: cover;\n  width: 2rem;\n  height: 2rem;\n`;\n\nexport const StackContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 0.1rem;\n`;\n\nexport const StackDisplay = styled.h3`\n  color: #fff;\n  margin-left: 0.4rem;\n  font-size: 1.5rem;\n  align-self: center;\n  min-width: 3ch;\n`;\n\nexport const ControlButton = styled.button`\n  border: none;\n  padding: 0 1.5rem;\n  border-radius: 4px;\n  color: #fff;\n  opacity: ${(props) => (props.disabled ? 0.5 : 1)};\n  background-color: #27ae60;\n  text-transform: uppercase;\n  cursor: ${(props) => (props.disabled ? 'not-allowed' : 'pointer')};\n  font-size: 1.2rem;\n  margin: 0 1.5rem;\n`;\n\nexport const ControlPanel = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 1rem 0 0.4rem 0;\n\n  @media only screen and (min-width: 405px) {\n    margin: 1rem;\n  }\n`;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bet, setTrayAmount } from '../../actions';\nimport {\n  Tray,\n  Chip,\n  StackDisplay,\n  Wrapper,\n  ControlButton,\n  ControlPanel,\n  StackImage,\n  StackContainer,\n} from './style';\nimport SerializedPlayer from '../../types/SerializedPlayer';\nimport CombinedRootState from '../../types/CombinedRootState';\nimport { GameAction } from '../../types/GameAction';\nimport GamePhase from '../../types/GamePhase';\n\ninterface Props {\n  bet: (amount: number) => void;\n  setTrayAmount: (trayAmount: number) => GameAction;\n  activePlayer?: SerializedPlayer | null;\n  gamePhase: GamePhase;\n}\n\nconst ChipTray: React.FC<Props> = ({\n  bet,\n  activePlayer,\n  setTrayAmount,\n  gamePhase,\n}) => {\n  const [betAmount, setBetAmount] = useState<number>(0);\n\n  const handleClick = (amount: number): void => {\n    if (activePlayer?.stack - betAmount - amount < 0) return;\n    setBetAmount((previousAmount) => previousAmount + amount);\n    setTrayAmount(betAmount + amount);\n  };\n\n  const clearBet = () => {\n    setBetAmount(0);\n    setTrayAmount(0);\n  };\n\n  const isBettingPhase = gamePhase === GamePhase.Betting;\n\n  return (\n    <Wrapper>\n      <Tray>\n        <ControlPanel>\n          <ControlButton\n            onClick={clearBet}\n            disabled={!betAmount || !isBettingPhase}\n          >\n            Clear\n          </ControlButton>\n          <StackContainer>\n            <StackImage />\n            <StackDisplay>${activePlayer?.stack - betAmount}</StackDisplay>\n          </StackContainer>\n          <ControlButton\n            disabled={!betAmount || !isBettingPhase}\n            onClick={() => {\n              bet(betAmount);\n              setBetAmount(0);\n            }}\n          >\n            Deal\n          </ControlButton>\n        </ControlPanel>\n        <div className=\"chips\">\n          <Chip\n            className=\"chip-red\"\n            onClick={() => handleClick(1)}\n            disabled={!isBettingPhase}\n          >\n            1\n          </Chip>\n          <Chip\n            className=\"chip-green\"\n            onClick={() => handleClick(5)}\n            disabled={!isBettingPhase}\n          >\n            5\n          </Chip>\n          <Chip\n            className=\"chip-purple\"\n            onClick={() => handleClick(25)}\n            disabled={!isBettingPhase}\n          >\n            25\n          </Chip>\n          <Chip\n            className=\"chip-blue\"\n            onClick={() => handleClick(50)}\n            disabled={!isBettingPhase}\n          >\n            50\n          </Chip>\n          <Chip\n            className=\"chip-black\"\n            onClick={() => handleClick(100)}\n            disabled={!isBettingPhase}\n          >\n            100\n          </Chip>\n        </div>\n      </Tray>\n    </Wrapper>\n  );\n};\n\nconst mapStateToProps = (state: CombinedRootState) => ({\n  activePlayer: state.player.activePlayer,\n  gamePhase: state.game.phase,\n});\n\nexport default connect(mapStateToProps, {\n  bet,\n  setTrayAmount,\n})(ChipTray);\n","import styled from 'styled-components';\nimport MenuIcon from '../../images/menu.svg';\n\nexport const StyledHeader = styled.header`\n  background-color: #2c3e50;\n  text-transform: uppercase;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.3rem;\n`;\n\nexport const Title = styled.h1`\n  color: #fff;\n  letter-spacing: 1.5px;\n  margin-left: 1rem;\n  font-size: 1.5rem;\n`;\n\ninterface MenuButtonProps {\n  hide: boolean;\n}\n\nexport const MenuButton = styled.button`\n  visibility: ${(props: MenuButtonProps) =>\n    props.hide ? 'hidden' : 'visible'};\n  border: none;\n  width: 3rem;\n  height: 100%;\n  cursor: pointer;\n  background-color: inherit;\n  background-size: cover;\n  background-image: url(${MenuIcon});\n  background-repeat: no-repeat;\n  background-position: center;\n`;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { StyledHeader, Title, MenuButton } from './style';\nimport CombinedRootState from '../../types/CombinedRootState';\nimport { setGameMenuVisibility } from '../../actions';\nimport { GameAction } from '../../types/GameAction';\nimport SerializedPlayer from '../../types/SerializedPlayer';\n\ninterface Props {\n  isMenuVisible: boolean;\n  setGameMenuVisibility: (isGameMenuVisible: boolean) => GameAction;\n  activePlayer: SerializedPlayer | null;\n}\n\nconst Header: React.FC<Props> = ({\n  setGameMenuVisibility,\n  isMenuVisible,\n  activePlayer,\n}) => {\n  return (\n    <StyledHeader>\n      <Title>React Blackjack</Title>\n      <MenuButton\n        hide={!activePlayer}\n        onClick={() => setGameMenuVisibility(!isMenuVisible)}\n      />\n    </StyledHeader>\n  );\n};\n\nconst mapStateToProps = (state: CombinedRootState) => ({\n  isMenuVisible: state.game.isGameMenuVisible,\n  activePlayer: state.player.activePlayer,\n});\n\nexport default connect(mapStateToProps, { setGameMenuVisibility })(Header);\n","import styled, { keyframes } from 'styled-components';\n\nexport const CardContainer = styled.div`\n  width: 6.5rem;\n`;\n\nconst flipAnimation = keyframes`\n  from {\n    transform: translateX(3rem);\n  }\n\n  to {\n    transform: translateX(0);\n  }\n`;\n\nexport const CardBase = styled.img`\n  position: relative;\n  width: 100%;\n  height: auto;\n  animation: ${flipAnimation} 0.5s ease-in-out;\n`;\n","import TwoHearts from '../images/2H.svg';\nimport ThreeHearts from '../images/3H.svg';\nimport FourHearts from '../images/4H.svg';\nimport FiveHearts from '../images/5H.svg';\nimport SixHearts from '../images/6H.svg';\nimport SevenHearts from '../images/7H.svg';\nimport EightHearts from '../images/8H.svg';\nimport NineHearts from '../images/9H.svg';\nimport TenHearts from '../images/TH.svg';\nimport JackHearts from '../images/JH.svg';\nimport QueenHearts from '../images/QH.svg';\nimport KingHearts from '../images/KH.svg';\nimport AceHearts from '../images/AH.svg';\nimport TwoSpades from '../images/2S.svg';\nimport ThreeSpades from '../images/3S.svg';\nimport FourSpades from '../images/4S.svg';\nimport FiveSpades from '../images/5S.svg';\nimport SixSpades from '../images/6S.svg';\nimport SevenSpades from '../images/7S.svg';\nimport EightSpades from '../images/8S.svg';\nimport NineSpades from '../images/9S.svg';\nimport TenSpades from '../images/TS.svg';\nimport JackSpades from '../images/JS.svg';\nimport QueenSpades from '../images/QS.svg';\nimport KingSpades from '../images/KS.svg';\nimport AceSpades from '../images/AS.svg';\nimport TwoDiamonds from '../images/2D.svg';\nimport ThreeDiamonds from '../images/3D.svg';\nimport FourDiamonds from '../images/4D.svg';\nimport FiveDiamonds from '../images/5D.svg';\nimport SixDiamonds from '../images/6D.svg';\nimport SevenDiamonds from '../images/7D.svg';\nimport EightDiamonds from '../images/8D.svg';\nimport NineDiamonds from '../images/9D.svg';\nimport TenDiamonds from '../images/TD.svg';\nimport JackDiamonds from '../images/JD.svg';\nimport QueenDiamonds from '../images/QD.svg';\nimport KingDiamonds from '../images/KD.svg';\nimport AceDiamonds from '../images/AD.svg';\nimport TwoClubs from '../images/2C.svg';\nimport ThreeClubs from '../images/3C.svg';\nimport FourClubs from '../images/4C.svg';\nimport FiveClubs from '../images/5C.svg';\nimport SixClubs from '../images/6C.svg';\nimport SevenClubs from '../images/7C.svg';\nimport EightClubs from '../images/8C.svg';\nimport NineClubs from '../images/9C.svg';\nimport TenClubs from '../images/TC.svg';\nimport JackClubs from '../images/JC.svg';\nimport QueenClubs from '../images/QC.svg';\nimport KingClubs from '../images/KC.svg';\nimport AceClubs from '../images/AC.svg';\nimport BB from '../images/BB.svg';\n\nexport default {\n  '2Hearts': TwoHearts,\n  '3Hearts': ThreeHearts,\n  '4Hearts': FourHearts,\n  '5Hearts': FiveHearts,\n  '6Hearts': SixHearts,\n  '7Hearts': SevenHearts,\n  '8Hearts': EightHearts,\n  '9Hearts': NineHearts,\n  '10Hearts': TenHearts,\n  JackHearts,\n  QueenHearts,\n  KingHearts,\n  AceHearts,\n  '2Spades': TwoSpades,\n  '3Spades': ThreeSpades,\n  '4Spades': FourSpades,\n  '5Spades': FiveSpades,\n  '6Spades': SixSpades,\n  '7Spades': SevenSpades,\n  '8Spades': EightSpades,\n  '9Spades': NineSpades,\n  '10Spades': TenSpades,\n  JackSpades,\n  QueenSpades,\n  KingSpades,\n  AceSpades,\n  '2Diamonds': TwoDiamonds,\n  '3Diamonds': ThreeDiamonds,\n  '4Diamonds': FourDiamonds,\n  '5Diamonds': FiveDiamonds,\n  '6Diamonds': SixDiamonds,\n  '7Diamonds': SevenDiamonds,\n  '8Diamonds': EightDiamonds,\n  '9Diamonds': NineDiamonds,\n  '10Diamonds': TenDiamonds,\n  JackDiamonds,\n  QueenDiamonds,\n  KingDiamonds,\n  AceDiamonds,\n  '2Clubs': TwoClubs,\n  '3Clubs': ThreeClubs,\n  '4Clubs': FourClubs,\n  '5Clubs': FiveClubs,\n  '6Clubs': SixClubs,\n  '7Clubs': SevenClubs,\n  '8Clubs': EightClubs,\n  '9Clubs': NineClubs,\n  '10Clubs': TenClubs,\n  JackClubs,\n  QueenClubs,\n  KingClubs,\n  AceClubs,\n  BB,\n};\n","import React from 'react';\nimport { CardContainer, CardBase } from './style';\nimport CardImages from '../../utils/CardImages';\n\ninterface Props {\n  rank: string;\n  suit: string;\n}\n\nconst Card: React.FC<Props> = ({ rank, suit }) => {\n  return (\n    <CardContainer>\n      <CardBase src={CardImages[`${rank}${suit}`]} />\n    </CardContainer>\n  );\n};\n\nexport default Card;\n","import styled from 'styled-components';\n\nexport default styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 14rem;\n`;\n","import styled from 'styled-components';\n\nexport default styled.div`\n  display: flex;\n  justify-content: center;\n\n  & > *:not(:first-child) {\n    margin-left: -4rem;\n  }\n`;\n","import styled from 'styled-components';\n\ninterface Props {\n  color: string;\n}\n\nexport default styled.div`\n  color: #fff;\n  background-color: ${(props: Props) => props.color};\n  font-size: 1.2rem;\n  text-align: center;\n  border-radius: 6px;\n  margin: 1rem 1rem;\n  padding: 0.5rem 1.25rem;\n  flex: 0;\n`;\n","import React from 'react';\nimport Indicator from './style';\n\ninterface Props {\n  value: number;\n  length: number;\n}\n\nconst HandScore: React.FC<Props> = ({ value, length }) => {\n  const getHandLabelAndColor = () => {\n    if (value === 21 && length === 2) {\n      return ['BJ', '#2ed573'];\n    }\n\n    if (value > 21) {\n      return ['BUST', '#c0392b'];\n    }\n\n    return [value, '#2c3e50'];\n  };\n\n  const [label, color] = getHandLabelAndColor();\n\n  return <Indicator color={String(color)}>{label}</Indicator>;\n};\n\nexport default HandScore;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Card from '../Card';\nimport CombinedRootState from '../../types/CombinedRootState';\nimport SerializedPlayer from '../../types/SerializedPlayer';\nimport HandWrapper from './style';\nimport HandContainer from '../common/HandContainer';\nimport HandScore from '../HandScore';\n\ninterface Props {\n  activePlayer?: SerializedPlayer;\n}\n\nconst PlayerHand: React.FC<Props> = ({ activePlayer }) => {\n  return (\n    <HandWrapper>\n      <HandContainer>\n        {activePlayer &&\n          activePlayer.hand.map(({ suit, rank }) => (\n            <Card suit={suit} rank={rank} key={`${rank}${suit}`} />\n          ))}\n      </HandContainer>\n      {activePlayer?.hand.length > 0 && (\n        <HandScore\n          value={activePlayer.handValue}\n          length={activePlayer.hand.length}\n        />\n      )}\n    </HandWrapper>\n  );\n};\n\nconst mapStateToProps = (state: CombinedRootState) => ({\n  activePlayer: state.player.activePlayer,\n});\n\nexport default connect(mapStateToProps, null)(PlayerHand);\n","import styled from 'styled-components';\n\nexport const HandControlWrapper = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  max-width: 35rem;\n  margin: 0 auto;\n`;\n\ninterface HandControlButtonProps {\n  disabled?: boolean;\n}\n\nexport const HandControlButton = styled.button`\n  cursor: pointer;\n  border: none;\n  color: white;\n  font-size: 1.2rem;\n  margin-top: 1rem;\n  padding: 1rem 1.5rem;\n  border-radius: 4px;\n  background-color: #e67e22;\n  text-transform: uppercase;\n  opacity: ${(props: HandControlButtonProps) => (props.disabled ? 0.5 : 1)};\n`;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { HandControlButton, HandControlWrapper } from './style';\nimport CombinedRootState from '../../types/CombinedRootState';\nimport SerializedPlayer from '../../types/SerializedPlayer';\nimport { hit, stand, double } from '../../actions';\nimport { PlayerStatus } from '../../types/PlayerStatus';\n\ninterface Props {\n  activePlayer?: SerializedPlayer | null;\n  hit: () => void;\n  stand: () => void;\n  double: () => void;\n}\n\nconst PlayerHandControls: React.FC<Props> = ({\n  activePlayer,\n  hit,\n  stand,\n  double,\n}) => {\n  const isPlayerActive = activePlayer.status === PlayerStatus.Active;\n  const isPlayerHoldingCards = activePlayer?.hand.length > 0;\n\n  return (\n    <HandControlWrapper>\n      {isPlayerActive && isPlayerHoldingCards && (\n        <>\n          <HandControlButton onClick={hit}>Hit</HandControlButton>\n          <HandControlButton onClick={stand}>Stand</HandControlButton>\n        </>\n      )}\n      {activePlayer.hand.length === 2 && isPlayerActive && (\n        <HandControlButton\n          disabled={activePlayer.stack - activePlayer.betSize < 0}\n          onClick={double}\n        >\n          Double\n        </HandControlButton>\n      )}\n    </HandControlWrapper>\n  );\n};\n\nconst mapStateToProps = (state: CombinedRootState) => ({\n  activePlayer: state.player.activePlayer,\n});\n\nexport default connect(mapStateToProps, { hit, stand, double })(\n  PlayerHandControls,\n);\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  height: 100%;\n\n  .hidden {\n    visibility: hidden;\n  }\n`;\n\nexport const PlayerArea = styled.div`\n  height: 20rem;\n`;\n\nexport const PotContainer = styled.div`\n  height: 9rem;\n`;\n","import styled from 'styled-components';\n\nexport default styled.div`\n  margin-top: 0.25rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 14.5rem;\n`;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Card from '../Card';\nimport CombinedRootState from '../../types/CombinedRootState';\nimport HandContainer from '../common/HandContainer';\nimport HandScore from '../HandScore';\nimport HandWrapper from './style';\nimport { SerializedHand } from '../../types/SerializedHand';\nimport SerializedPlayer from '../../types/SerializedPlayer';\nimport GamePhase from '../../types/GamePhase';\n\ninterface Props {\n  dealer?: { hand: SerializedHand; handValue: number };\n  players?: SerializedPlayer[];\n  gamePhase: GamePhase;\n}\n\nconst Dealer: React.FC<Props> = ({ dealer, players, gamePhase }) => {\n  return (\n    <HandWrapper>\n      <HandContainer className={dealer.hand.length === 0 ? 'hidden' : ''}>\n        {dealer &&\n          dealer.hand.map(({ suit, rank }, i) => {\n            if (\n              i === 0 &&\n              gamePhase !== GamePhase.DealerHand &&\n              gamePhase !== GamePhase.Results\n            ) {\n              return <Card suit=\"B\" rank=\"B\" key={`${rank}${suit}`} />;\n            }\n\n            return <Card suit={suit} rank={rank} key={`${rank}${suit}`} />;\n          })}\n      </HandContainer>\n      {dealer.hand.length > 0 && (\n        <HandScore value={dealer.handValue} length={dealer.hand.length} />\n      )}\n    </HandWrapper>\n  );\n};\n\nconst mapStateToProps = (state: CombinedRootState) => ({\n  dealer: state.game.dealer,\n  players: state.player.players,\n  gamePhase: state.game.phase,\n});\n\nexport default connect(mapStateToProps, null)(Dealer);\n","import styled, { keyframes } from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  img {\n    width: 4rem;\n    height: 4rem;\n  }\n\n  .take-chip {\n    position: fixed;\n    transform: translateY(-150vh);\n  }\n\n  .give-chip {\n    position: fixed;\n    transform: translateY(150vh);\n  }\n`;\n\nexport const ChipWrapper = styled.div`\n  text-align: center;\n  transition: all 4s;\n  z-index: 999;\n`;\n\nconst scaleAnimation = keyframes`\n  0% {\n    transform: scale(1);\n  }\n\n  50% {\n    transform: scale(1.5);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n`;\n\nexport const BetLabel = styled.p`\n  color: #fff;\n  border-radius: 4px;\n  font-size: 1.2rem;\n  padding: 0.75rem 1rem;\n  background-color: black;\n  text-transform: uppercase;\n  margin-bottom: 0.5rem;\n  animation: ${scaleAnimation} 0.75s ease-in-out;\n`;\n\nexport const WinLabel = styled(BetLabel)`\n  color: #2ecc71;\n`;\n\nexport const LoseLabel = styled(BetLabel)`\n  color: #e74c3c;\n`;\n\nexport const PushLabel = styled(BetLabel)`\n  color: #ecf0f1;\n`;\n","import React from 'react';\nimport {\n  Wrapper,\n  LoseLabel,\n  BetLabel,\n  WinLabel,\n  PushLabel,\n  ChipWrapper,\n} from './style';\nimport SerializedPlayer from '../../types/SerializedPlayer';\nimport GamePhase from '../../types/GamePhase';\nimport { SerializedHand } from '../../types/SerializedHand';\nimport HandOutcome from '../../types/HandOutcome';\nimport RedChip from '../../images/chip-red.svg';\n\ninterface Props {\n  activePlayer: SerializedPlayer;\n  trayAmount: number;\n}\n\nconst Pot: React.FC<Props> = ({ activePlayer, trayAmount }) => {\n  let animation = '';\n  const renderLabel = () => {\n    if (\n      !activePlayer ||\n      activePlayer.handOutcome === HandOutcome.Undetermined\n    ) {\n      return <BetLabel>Bet: ${activePlayer?.betSize || trayAmount}</BetLabel>;\n    }\n\n    if (activePlayer.handOutcome === HandOutcome.Loser) {\n      animation = 'take-chip';\n      return <LoseLabel>Lose: ${activePlayer?.betSize}</LoseLabel>;\n    }\n\n    if (activePlayer.handOutcome === HandOutcome.Winner) {\n      animation = 'give-chip';\n      return <WinLabel>Win: ${activePlayer?.betSize}</WinLabel>;\n    }\n    animation = 'give-chip';\n    return <PushLabel>Push</PushLabel>;\n  };\n\n  return (\n    <Wrapper>\n      {renderLabel()}\n      <ChipWrapper className={animation}>\n        <img src={RedChip} alt=\"Betting Chip\" />\n      </ChipWrapper>\n    </Wrapper>\n  );\n};\n\nexport default Pot;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PlayerHand from '../PlayerHand';\nimport PlayerHandControls from '../PlayerHandControls';\nimport CombinedRootState from '../../types/CombinedRootState';\nimport SerializedPlayer from '../../types/SerializedPlayer';\nimport { PlayerArea, Wrapper, PotContainer } from './style';\nimport DealerHand from '../DealerHand';\nimport Pot from '../Pot';\nimport GamePhase from '../../types/GamePhase';\nimport { SerializedHand } from '../../types/SerializedHand';\n\ninterface Props {\n  gamePhase: GamePhase;\n  activePlayer: SerializedPlayer | null;\n  dealer: { hand: SerializedHand; handValue: number };\n  trayAmount: number;\n}\n\nconst Table: React.FC<Props> = ({\n  activePlayer,\n  gamePhase,\n  dealer,\n  trayAmount,\n}) => {\n  return (\n    <Wrapper>\n      <DealerHand />\n      <PotContainer>\n        {(!!trayAmount || !!activePlayer?.betSize) && (\n          <Pot activePlayer={activePlayer} trayAmount={trayAmount} />\n        )}\n      </PotContainer>\n      <PlayerArea>\n        <PlayerHand />\n        <PlayerHandControls />\n      </PlayerArea>\n    </Wrapper>\n  );\n};\n\nconst mapStateToProps = (state: CombinedRootState) => ({\n  activePlayer: state.player.activePlayer,\n  gamePhase: state.game.phase,\n  dealer: state.game.dealer,\n  trayAmount: state.game.trayAmount,\n});\n\nexport default connect(mapStateToProps, null)(Table);\n","import styled from 'styled-components';\nimport GameOverImage from '../../images/gameover.jpg';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-image: linear-gradient(\n      to bottom,\n      rgba(33, 33, 33, 0.15),\n      rgba(33, 33, 33, 0.15)\n    ),\n    url(${GameOverImage});\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n  height: 100%;\n  cursor: pointer;\n`;\n\nexport const Message = styled.h1`\n  text-transform: uppercase;\n  color: #fff;\n  letter-spacing: 2px;\n  font-size: 4rem;\n  text-shadow: 0 1px 0 #000;\n`;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Wrapper, Message } from './style';\nimport { setGameMenuVisibility } from '../../actions';\nimport { GameAction } from '../../types/GameAction';\n\ninterface Props {\n  setGameMenuVisibility: (isGameMenuVisible: boolean) => GameAction;\n}\n\nconst GameOverMenu: React.FC<Props> = ({ setGameMenuVisibility }) => {\n  return (\n    <Wrapper onClick={() => setGameMenuVisibility(true)}>\n      <Message>Game Over</Message>\n    </Wrapper>\n  );\n};\n\nexport default connect(null, {\n  setGameMenuVisibility,\n})(GameOverMenu);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport 'fontsource-lato';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport GameMenu from './components/GameMenu';\nimport ChipTray from './components/ChipTray';\nimport CombinedRootState from './types/CombinedRootState';\nimport Header from './components/Header';\nimport Table from './components/Table';\nimport GameOverScreen from './components/GameOverScreen';\nimport SerializedPlayer from './types/SerializedPlayer';\nimport HandOutcome from './types/HandOutcome';\n\nconst GlobalStyle = createGlobalStyle`\n  *, *::before, *::after {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n  \n  html {\n    font-size: 62.5%;\n    font-family: \"Lato\";\n    text-rendering: optimizeLegibility;\n  }\n\n  body {\n    line-height: 1.7;\n    background-color: #000;\n  }\n\n  \n  @media only screen and (min-width: 405px) {\n    html {\n      font-size: 80%;\n    }\n  }\n`;\n\nconst AppWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100vh;\n  margin: 0 auto;\n  background-color: #186737;\n\n  @media only screen and (min-width: 405px) {\n    max-width: 40rem;\n    margin: 0 auto;\n  }\n`;\n\ninterface Props {\n  isGameMenuVisible: boolean;\n  activePlayer: SerializedPlayer | null;\n}\n\nconst App: React.FC<Props> = ({ isGameMenuVisible, activePlayer }) => {\n  const isPlayerBankrupt =\n    activePlayer?.stack < 1 && activePlayer.betSize === 0;\n\n  if (isPlayerBankrupt && !isGameMenuVisible) {\n    return (\n      <AppWrapper>\n        <GlobalStyle />\n        <GameOverScreen />\n      </AppWrapper>\n    );\n  }\n\n  return (\n    <AppWrapper>\n      <GlobalStyle />\n      <Header />\n      {isGameMenuVisible ? (\n        <GameMenu />\n      ) : (\n        <>\n          <Table />\n          <ChipTray />\n        </>\n      )}\n    </AppWrapper>\n  );\n};\n\nconst mapStateToProps = (state: CombinedRootState) => ({\n  isGameMenuVisible: state.game.isGameMenuVisible,\n  activePlayer: state.player.activePlayer,\n});\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}